[{"/home/cathy/Love-Diary/src/index.js":"1","/home/cathy/Love-Diary/src/reportWebVitals.js":"2","/home/cathy/Love-Diary/src/App/App.js":"3","/home/cathy/Love-Diary/src/App/MyBook.js":"4","/home/cathy/Love-Diary/src/components/Start/Start.js":"5","/home/cathy/Love-Diary/src/components/Login/Login.js":"6","/home/cathy/Love-Diary/src/components/Home/Home.js":"7","/home/cathy/Love-Diary/src/components/Diary/Diary.js":"8","/home/cathy/Love-Diary/src/components/Calendar/FullCalendar.js":"9","/home/cathy/Love-Diary/src/components/Login/SignUpButton.js":"10","/home/cathy/Love-Diary/src/components/Home/Timeline.js":"11","/home/cathy/Love-Diary/src/components/Diary/PicturesWall.js":"12","/home/cathy/Love-Diary/src/components/Calendar/AddFormButton.js":"13","/home/cathy/Love-Diary/src/components/Login/SignUpForm.js":"14","/home/cathy/Love-Diary/src/components/Calendar/AddForm.js":"15"},{"size":621,"mtime":1611159632559,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1611159632559,"results":"18","hashOfConfig":"17"},{"size":1047,"mtime":1611159632395,"results":"19","hashOfConfig":"17"},{"size":1031,"mtime":1611159632395,"results":"20","hashOfConfig":"17"},{"size":316,"mtime":1611159632559,"results":"21","hashOfConfig":"17"},{"size":4039,"mtime":1611201921578,"results":"22","hashOfConfig":"17"},{"size":2572,"mtime":1611159632495,"results":"23","hashOfConfig":"17"},{"size":5703,"mtime":1611199627652,"results":"24","hashOfConfig":"17"},{"size":12858,"mtime":1611199504272,"results":"25","hashOfConfig":"17"},{"size":658,"mtime":1611159632503,"results":"26","hashOfConfig":"17"},{"size":3237,"mtime":1611199531864,"results":"27","hashOfConfig":"17"},{"size":3088,"mtime":1611199625544,"results":"28","hashOfConfig":"17"},{"size":666,"mtime":1611159632483,"results":"29","hashOfConfig":"17"},{"size":4090,"mtime":1611203318692,"results":"30","hashOfConfig":"17"},{"size":5064,"mtime":1611203309444,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"8cncuy",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/cathy/Love-Diary/src/index.js",[],["69","70"],"/home/cathy/Love-Diary/src/reportWebVitals.js",[],"/home/cathy/Love-Diary/src/App/App.js",[],"/home/cathy/Love-Diary/src/App/MyBook.js",[],"/home/cathy/Love-Diary/src/components/Start/Start.js",[],"/home/cathy/Love-Diary/src/components/Login/Login.js",["71"],"import React , { useState, useEffect }from \"react\";\nimport CryptoJs from 'crypto-js';\nimport SignUpButton from './SignUpButton'\nimport moment from 'moment';\nimport Fade from '@material-ui/core/Fade';\nimport \"./Login.css\"\n\nimport axios from 'axios'\n\nconst API_ROOT = 'http://love-diary.anyday.com.tw:4000/api'\nconst instance = axios.create({\n  baseURL: API_ROOT\n})\n\nfunction Login({loginSuccess}){\n    const[myAccount, setAccount] = useState(\"\");\n    const[myPassword, setPassword] = useState(\"\");\n    //const[allAccounts, setAllAccounts] = useState([]);\n    //const[updateAccounts, setUpdateAccounts] = useState(0);\n    const[initAcc, setInitAcc] = useState(null);\n    \n    const addAccount = async(acc, pw, name1, name2, date) =>{\n        var newAcc = {\n            account: acc,\n            password: pw,\n            name1: name1,\n            name2: name2,\n            date: date\n        } \n        const {\n            data: { message}\n        } = await instance.post('/addAccount', { params: newAcc });\n        \n        if(message === \"success\" ){\n            setInitAcc(newAcc);\n        }\n        return message;\n    }\n\n    const handleSubmit = async() => {\n        if(myAccount === \"\" || myPassword === \"\"){\n            alert(\"Please enter your Account Name and Password\")\n        }else{\n            //console.log(\"handleSubmit\");\n            const pwd = CryptoJs.MD5(myPassword).toString();           \n            const {\n                data: { message, myAcc}\n            } = await instance.get('/confirmAccount', {params:{myAccount, pwd}})\n            //console.log(\"message:\" + message);\n            if(message===\"error\"){\n                alert(\"Your Account Name or Password is wrong!\");\n            }else{\n                loginSuccess(myAcc._id, myAcc.name1, myAcc.name2, myAcc.date);\n            }\n        }\n    }\n\n    const initAccount = async()=>{\n        if(initAcc !== null){\n            var acc = initAcc.account;\n            const {\n                data: { accountId}\n            } = await instance.get('/findAccount', { params: {acc} });\n            //console.log(accountId);\n            const end = moment(initAcc.date).add(1,\"days\").format(\"YYYY-MM-DD\");\n            var event = {\n                accountId:accountId, \n                title: \"First Day\",\n                favorite: true,\n                todo: false,\n                start: initAcc.date,\n                end: end,\n                textColor: \"white\",\n                backgroundColor:\"#F6919D\",\n                borderColor:\"#F6919D\"\n            }\n            const {\n                data: { message }\n            } = await instance.post('/addFirstEvent', { params: { event } });\n            if(message===\"error\") console.log(\"initAccount error\");\n        }\n    }\n\n    useEffect(()=>{\n        initAccount();\n    },[initAcc]);\n    \n    return(\n        <Fade in={true} {...({ timeout: 1500 } )}>\n        <div className=\"closedBook\">\n            <p className=\"login_title\">Login</p>\n            <form>\n                <div className=\"acc_pas\">\n                    <label htmlFor=\"account\" className=\"account\"></label>\n                    <input type=\"text\" name=\"account\" id=\"account\" className=\"login_type\"\n                        value={myAccount}\n                        onChange={(e) => setAccount(e.target.value)}\n                        placeholder=\"Account\"\n                    ></input>\n                    <p></p>\n                    <label htmlFor=\"password\" className=\"password\"></label>\n                    <input type=\"password\" name=\"password\" id=\"password\" className=\"login_type\"\n                        value={myPassword}\n                        onChange={(e) => setPassword(e.target.value)}\n                        placeholder=\"Password\"\n                    ></input>\n                </div>\n                <button onClick={handleSubmit} type=\"button\" className=\"open\" >Open</button>\n                <SignUpButton addAccount={addAccount}></SignUpButton>\n            </form>\n        </div>\n        </Fade>\n    )\n    \n}\nexport default Login;\n\n","/home/cathy/Love-Diary/src/components/Home/Home.js",["72"],"import React, { useState , useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport moment from 'moment';\nimport { RoughNotation, RoughNotationGroup } from \"react-rough-notation\"\nimport MyTimeline from './Timeline'\nimport \"./Home.css\";\nimport {Popover} from 'antd';\n\n\nfunction Home({accountInfo}){\n    const [dayCnt, setDayCnt] = useState(0);\n    useEffect(()=>{\n        const startDate = moment(accountInfo.startDate);\n        const endDate = moment();\n        const days = endDate.diff(startDate, 'days');\n        setDayCnt(Number(days));\n    }, []);\n    \n    return (\n        <div className='boook homebook'>\n            <div className=\"list\">\n                <button className='buttons now'>\n                    <NavLink to=\"/\">Home</NavLink>\n                </button>\n                <p> </p>\n                <button className='buttons'>\n                    <NavLink to=\"/Calendar\">Calendar</NavLink>\n                </button>\n                <p> </p>\n                <button className='buttons'>\n                    <NavLink to=\"/Diary\">Diary</NavLink>\n                </button>\n            </div>\n            <div className=\"boookleft font_s\">\n                <div className=\"countingDays\">\n                    <RoughNotationGroup show={true} >\n                    <div className=\"names\">\n                        \n                        <RoughNotation type=\"circle\" show=\"true\" color=\" #AEC6EF\" animationDelay=\"1000\" >{accountInfo.name1}</RoughNotation>\n                        <p>and</p>\n                        <RoughNotation type=\"box\" show=\"true\" color=\" #AEC6EF\" animationDelay=\"2000\" >{accountInfo.name2}</RoughNotation>\n                        \n                    </div>\n                    \n                    <p className=\"textinside\">have been in love for ...</p>\n                    <div className=\"dayCount\">\n                        <RoughNotation className=\"dayCnt\" type=\"highlight\" show=\"true\" color=\" rgb(190, 226, 229)\" animationDelay=\"3000\" >{dayCnt}</RoughNotation>\n                        <p>DAYS</p>\n                    </div>\n                    </RoughNotationGroup>\n                </div>\n            </div>  \n            <div className=\"boookright\">\n                <Popover placement=\"top\" content={\"Add \\\"favorite\\\" event in Calendar page to record more important memory\"}>\n                <p className=\"line_start font_F\">Our Love Story...</p>\n                </Popover>\n                <MyTimeline accountId={accountInfo.accountId}></MyTimeline>\n            </div>\n        </div>\n    );\n    \n}\nexport default Home;","/home/cathy/Love-Diary/src/components/Diary/Diary.js",["73","74"],"import React , {useState, useEffect}from 'react'\nimport { NavLink } from \"react-router-dom\";\nimport PicturesWall from \"./PicturesWall\";\nimport { DoubleLeftOutlined ,  DoubleRightOutlined , FrownOutlined, MehOutlined, SmileOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport { Rate, DatePicker, message} from 'antd';\n\n\n\nimport \"./Diary.css\"\n\nimport axios from 'axios'\n\nconst API_ROOT = 'http://love-diary.anyday.com.tw:4000/api'\nconst instance = axios.create({\n  baseURL: API_ROOT\n})\n\n\nconst customIcons = {\n    1: <FrownOutlined />,\n    2: <FrownOutlined />,\n    3: <MehOutlined />,\n    4: <SmileOutlined />,\n    5: <SmileOutlined />,\n  };\n\nexport default function Diary({accountId}){\n    const [dateStr, setDateStr] = useState();\n    const [photoText, setPhotoText] = useState(\"\");\n    const [mood, setMood] = useState(3);\n    const [text, setText] = useState(\"\");\n    const [isInDatabase, setIsInDatabase] = useState(false);\n\n    const goLeftPage = () =>{\n        const newDate = moment(dateStr).subtract(1,\"days\").format(\"YYYY-MM-DD\");\n        setDateStr(newDate);\n    }\n\n    const goRightPage = () =>{\n        const newDate = moment(dateStr).add(1,\"days\").format(\"YYYY-MM-DD\");\n        setDateStr(newDate);\n    }\n\n    const photoText_onChange = (e) => {\n        //console.log(\"photoText:\" + e.target.value);\n        setPhotoText(e.target.value);\n    }\n\n    const mood_onChange = (v) =>{\n        setMood(v);\n    }\n    \n    const text_onChange = (e) => {\n        //console.log(e.target.value);\n        setText(e.target.value);\n    }\n\n    const date_onChange = (val, str) => {\n        console.log(\"str:\"+str);\n        if(str!==\"\"){\n            setDateStr(str);\n        }\n    }\n\n    const _getContent = async () => {\n        const {\n            data: { msg, content}\n        } = await instance.get('/getContent',{ params: { accountId, dateStr}});\n        if(msg===\"exist\"){\n            //console.log(\"getContent\");\n            //console.log(content);\n            setMood(content.mood);\n            setText(content.text);\n            setIsInDatabase(true);\n            setPhotoText(content.photoText);\n        }else{\n            setMood(3);\n            setText(\"\");\n            setIsInDatabase(false);\n            setPhotoText(\"\");\n        }\n    }\n\n    const _addContent = async () =>{\n        const {\n            data: { msg}\n        } = await instance.post('/addContent',{ params: { accountId, dateStr, mood, text, photoText}});\n        if(msg===\"success\"){\n            message.success('Save successfully',3);\n            setIsInDatabase(true);\n        }else{\n            message.error('Fail to save',3);\n        }\n    }\n\n    const _updateContent = async () => {\n        const {\n            data: { msg}\n        } = await instance.post('/updateContent',{ params: { accountId, dateStr, mood, text, photoText}});\n        if(msg===\"success\"){\n            message.success('Save successfully',3);\n        }else{\n            message.error('Fail to save',3);\n        }\n    }\n\n    const onSave = () =>{\n        if(isInDatabase){\n            _updateContent();\n        }else{\n            _addContent();\n        }\n    }\n\n    useEffect(()=>{\n        if(dateStr!==undefined){\n            _getContent();\n        }\n    },[dateStr]);\n\n    useEffect(()=>{\n        //let str = new Date().toISOString().replace(/T.*$/, ''); // YYYY-MM-DD of today\n        let str = moment().format(\"YYYY-MM-DD\");\n        setDateStr(str);\n    },[]);\n\n    const desc = ['terrible', 'bad', 'normal', 'good', 'wonderful'];\n\n    return (\n        <div className='boook'>\n            <div className=\"list\">\n                <button className='buttons'type=\"button\" >\n                    <NavLink to=\"/\">Home</NavLink>\n                </button>\n                <p></p>\n                <button className='buttons' type=\"button\">\n                    <NavLink to=\"/Calendar\">Calendar</NavLink>\n                </button>\n                <p></p>\n                <button className='buttons now' disabled={true} type=\"button\">\n                    <NavLink to=\"/Diary\">Diary</NavLink>\n                </button>\n            </div>\n            <div className='boookleft'>\n                <DoubleLeftOutlined onClick={goLeftPage} className=\"leftbutton\"/>\n                <div className=\"today font_s\">\n                    <div>\n                        <DatePicker format=\"YYYY-MM-DD\"  onChange={date_onChange}></DatePicker>\n                        <div className=\"today_title\">Date : </div>\n                        <div className=\"today_date\">{dateStr}</div>\n                    </div>\n                    <div>\n                        <div className=\"today_mood\">Mood : </div>\n                        \n                        <Rate className=\"mood_rate\" tooltips={desc} style={{color:\"#DBB600\"}}value={mood} onChange={mood_onChange} character={({ index }) => customIcons[index + 1]} className=\"mood\"></Rate>\n                        \n                    </div>\n                </div>\n                <div  className=\"RecordToday\"></div>\n                <textarea placeholder=\"Record your beautiful Love Memory...\"\n                    // rows=\"12\" cols=\"40\"\n                    onChange = {text_onChange}\n                    value={text}\n                    className=\"RecordText font_F\"\n                ></textarea>\n                <button onClick={onSave} className=\"save_button font_s\">save</button>\n            </div>\n            <div className='boookright'>\n                <DoubleRightOutlined onClick={goRightPage} className=\"rightbutton\"/>\n                <PicturesWall dateStr={dateStr} accountId={accountId} photoText={photoText} photoText_onChange={photoText_onChange}></PicturesWall>\n            </div>\n        </div>\n    );\n}","/home/cathy/Love-Diary/src/components/Calendar/FullCalendar.js",["75","76","77","78","79","80","81","82","83"],"import './FullCalendar.css'\nimport React, { useState, useEffect , useRef} from 'react'\nimport { NavLink } from \"react-router-dom\";\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\nimport AddFormButton from './AddFormButton'\n//let todayStr = new Date().toISOString().replace(/T.*$/, ''); // YYYY-MM-DD of today\nimport moment from 'moment';\nimport { RoughNotation } from \"react-rough-notation\"\n\nimport axios from 'axios'\nconst API_ROOT = 'http://love-diary.anyday.com.tw:4000/api'\nconst instance = axios.create({\n  baseURL: API_ROOT\n})\n/*\n        accountInfo:{\n            accountId: acc_id,\n            name1: name1,\n            name2: name2,\n            startDate: date\n        }\n*/\nexport default function FullCal({accountId}){\n  const [currentEvents, setCurrentEvents] = useState([]);\n  const [selectedStr, setSelectedStr] = useState([]);\n  const [dayEvents, setDayEvents] = useState([]);\n  const [todoEvents, setTodoEvents] = useState([]);\n  const calendarAPI = useRef(null);\n\n  const handleDateSelect = (selectInfo) => {\n    setSelectedStr([selectInfo.startStr, selectInfo.endStr]);\n    _getDayEvents(selectInfo.startStr, selectInfo.endStr);\n  }\n\n  function isOverlapped(start, end){\n    if( (start < selectedStr[0] && end < selectedStr[1]) || (start > selectedStr[0] && end > selectedStr[1]) ){\n      return false;\n    }else return true;\n  }\n\n  const handleEventClick = (clickInfo) => {\n    if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n      clickInfo.event.remove()\n      //console.log(!( (clickInfo.event.startStr < selectedStr[0] && clickInfo.event.endStr < selectedStr[1]) || (clickInfo.event.startStr > selectedStr[0] && clickInfo.event.endStr > selectedStr[1]) ))\n      if(isOverlapped(clickInfo.event.startStr, clickInfo.event.endStr)){\n        var newDay = dayEvents.filter(e => e._id!==clickInfo.event._def.extendedProps._id)\n        setDayEvents(newDay);\n        setSelectedStr(selectedStr);//用這個觸發rerender\n      }\n    }\n  }\n\n  const handleEvents = (events) => {\n    setCurrentEvents(events);\n  }\n\n  const addEvent = (isAllDay, startTime, endTime, color, title, fav ) =>{\n    let calendarApi = calendarAPI.current.getApi();\n    if (title) {\n      if(isAllDay){\n        calendarApi.addEvent({\n          title,\n          start: startTime ,\n          end: endTime ,\n          backgroundColor: color,\n          borderColor: color,\n          textColor: \"white\",\n          favorite: fav\n        })\n      }else{\n        calendarApi.addEvent({\n          title,\n          start: startTime,\n          end: endTime ,\n          backgroundColor: \"white\",\n          borderColor: color,\n          textColor: color,\n          favorite: fav\n        });\n      }\n    }\n  }\n\n  const _getEvents = async()=>{\n    const {\n      data: { message, events }\n    } = await instance.get('/getEvents', { params: { accountId } });\n    return events;\n  }\n\n  const _getDayEvents = async(dayStart, dayEnd)=>{\n    const {\n      data: { message, events }\n    } = await instance.get('/getDayEvents', { params: { accountId, dayStart, dayEnd } });\n    /*if(events.length > 0){\n      console.log(events[0]);\n      console.log(events[0].start);\n    }*/\n    //console.log(events);\n    setDayEvents(events);\n  }\n\n  const _eventsAdd = async(addInfo)=>{\n    //console.log(addInfo);\n    //var accountId = accountInfo.accountId;\n    const favorite = addInfo.event._def.extendedProps.favorite;\n    const {\n      data: { message , event}\n    } = await instance.post('/addEvent', { params: { accountId, addInfo , favorite} })\n    if(message==='error'){\n      console.log(\"_eventsAdd error\");\n    }\n    if(isOverlapped(addInfo.event.startStr, addInfo.event.endStr )){\n      setDayEvents([...dayEvents, event]);\n    }\n  }\n\n  const _eventsRemove = async(removeInfo)=>{\n    const _id = removeInfo.event._def.extendedProps._id;\n    const {\n      data: { message }\n    } = await instance.post('/removeEvent', { params: { _id } })\n    if(message==='error'){\n      console.log(\"_eventsRemove error\");\n    }\n  }\n\n  function getSchemaEvent(eventApi){\n    var event = {\n      accountId : eventApi._def.extendedProps.accountId,\n      todo : eventApi._def.extendedProps.todo,\n      favorite : eventApi._def.extendedProps.favorite,\n      title : eventApi._def.title,\n      start : eventApi.startStr,\n      end : eventApi.endStr,\n      textColor : eventApi.textColor,\n      borderColor : eventApi.borderColor,\n      backgroundColor: eventApi.backgroundColor\n    }\n    return event;\n  }\n  \n  const _eventDrop = async(eventDropInfo)=>{\n    const _id = eventDropInfo.oldEvent._def.extendedProps._id;\n    const newStart = eventDropInfo.event.startStr\n    const newEnd = eventDropInfo.event.endStr\n    const {\n      data: { message }\n    } = await instance.post('/dropEvent', { params: { _id, newStart, newEnd } })\n    if(message==='error'){\n      console.log(\"_eventsDrop error\");\n    }\n    var newOverlapped = isOverlapped(newStart, newEnd);\n    var oldOverlapped = isOverlapped(eventDropInfo.oldEvent.startStr, eventDropInfo.oldEvent.endStr);\n    if(newOverlapped === true && oldOverlapped === false){\n      var tmp = currentEvents.filter(e => e._def.extendedProps._id === _id);\n      var event = getSchemaEvent(tmp[0]);\n      setDayEvents([...dayEvents, event]);\n    }else if(newOverlapped === false && oldOverlapped === true){\n      var newDay = dayEvents.filter(e => e._id !== _id)\n      setDayEvents(newDay);\n    }\n  }\n\n  \n  const addTodoEvent = async(title, color)=>{\n    var event = {title: title, color: color};\n    const {\n      data: { message , todoEvent}\n    } = await instance.post('/addTodoEvent', { params: { accountId, event } })\n    if(message==='error'){\n      console.log(\"addTodoEvent error\");\n    }\n    setTodoEvents([...todoEvents, todoEvent]);\n    \n  }\n\n  const _eventReceive = async(info) => {\n      while(1){\n        if(info.draggedEl.parentNode !== null ){\n          var event = info.event;\n          //console.log(event);\n          //var accountId = accountInfo.accountId;\n          const {\n            data: { message }\n          } = await instance.post('/receiveEvent', { params: { accountId, event } })\n          if(message==='error'){\n            console.log(\"_eventsReceive error\");\n          }\n          //remove the todo event from todoEvent\n          _eventsRemove(info);\n\n          if(isOverlapped(event.startStr, event.endStr)){\n            var e = getSchemaEvent(event);\n            setDayEvents([...dayEvents, e]);\n          }\n          // remove the element from the \"Draggable Events\" list\n          info.draggedEl.parentNode.removeChild(info.draggedEl);\n          break;\n        }\n      }\n  }\n\n  const _getTodoEvents = async () =>{\n    const {\n      data: { message, events }\n    } = await instance.get('/getTodoEvents', { params: { accountId } });\n    setTodoEvents(events);\n  }\n\n  //for draggable todo events\n  useEffect(() => {\n    let draggableEl = document.getElementById(\"external-events\");\n    new Draggable(draggableEl, {\n      itemSelector: \".todoitem\",\n      eventData: function(eventEl) {\n        let title = eventEl.getAttribute(\"title\");\n        let _id = eventEl.getAttribute(\"data\");\n        let color = eventEl.getAttribute(\"color\");\n        return {\n          title: title,\n          _id: _id, //id不知道能不能拿掉，怕draggable的地方會錯\n          color: color\n        };\n      }\n    });\n  },[]);\n\n  //initialization\n  useEffect(() => {\n    _getTodoEvents();\n    //let todayStr = new Date().toISOString().replace(/T.*$/, ''); // YYYY-MM-DD of today\n    let todayStr = moment().format(\"YYYY-MM-DD\");\n    const todayStr2 = moment(todayStr).add(1,\"days\").format(\"YYYY-MM-DD\");\n    setSelectedStr([todayStr, todayStr2]);\n    _getDayEvents(todayStr, todayStr2);\n  }, [])\n\n\n  return (\n    <div className='boook'>\n      <div className=\"list\">\n          <button className='buttons'>\n            <NavLink to=\"/\">Home</NavLink>\n          </button>\n          <p></p>\n          <button className='buttons now' disabled=\"false\">\n            <NavLink to=\"/Calendar\">Calendar</NavLink>\n          </button>\n          <p></p>\n          <button className='buttons'>\n              <NavLink to=\"/Diary\">Diary</NavLink>\n          </button>\n      </div>\n      <div className='boookleft calleft'>\n        <div className=\"calendar\">\n          <FullCalendar\n            id = \"myFullCalendar\"\n            ref = {calendarAPI}\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={{\n              left: 'prev,next today',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,timeGridDay'\n            }}\n            initialView='dayGridMonth'\n            editable={true} //可以移動事件\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            initialEvents={_getEvents} // alternatively, use the `events` setting to fetch from a feed\n            select={handleDateSelect}\n            eventContent={renderEventContent} // custom render function\n            eventClick={handleEventClick}\n            eventsSet={handleEvents} // called after events are initialized/added/changed/removed\n            eventDisplay='block'\n            eventAdd={_eventsAdd}\n            eventRemove={_eventsRemove}\n            eventDrop={_eventDrop}\n            eventChange={_eventDrop}\n            aspectRatio={1.33}\n            eventReceive={_eventReceive}\n            /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n          />\n        </div>\n      </div>\n      <div className='boookright calright'>\n        <AddFormButton addEvent={addEvent} addTodoEvent={addTodoEvent}></AddFormButton>\n        <div className=\"dayEventsList__container\">\n            <div className=\"title-form\">\n              <RoughNotation type=\"highlight\" show=\"true\" className=\"title\" color=\" rgb(190, 226, 229)\" animationDelay=\"1000\">EVENTS</RoughNotation>\n              <div className=\"subtitle\">Date : {selectedStr[0]}</div>\n            </div>\n            <ul id=\"dayEventsList\" className=\"eventlist\">\n              {dayEvents.map((ele,i)=>(\n                ele.favorite ?\n                <div key={i+1} id=\"dayEventsList__item\" className=\"event\">\n                  <div id=\"dayEventsList__item-time\" > <i class=\"fas fa-star\" id={\"favIcon\"+i}></i>{\n                  //可以跨日版本\n                  (ele.start.length===10 || ele.start < selectedStr[0] && ele.end > selectedStr[1])? \"       All-Day\":\n                  (ele.start >= selectedStr[0] && ele.end <= selectedStr[1])?ele.start.substr(11,5)+\"~\"+ele.end.substr(11,5):\n                  (ele.start < selectedStr[0])? \"00:00~\"+ele.end.substr(11,5):ele.start.substr(11,5)+\"~24:00\"\n                  } : {ele.title}</div>\n                </div> : //----------------------------------------\n                <div key={i+1} id=\"dayEventsList__item\" className=\"event\">\n                <div id=\"dayEventsList__item-time\" > <i class=\"far fa-star\" id={\"favIcon\"+i}></i>{\n                //可以跨日版本\n                (ele.start.length===10 || ele.start < selectedStr[0] && ele.end > selectedStr[1])? \"       All-Day\":\n                (ele.start >= selectedStr[0] && ele.end <= selectedStr[1])?ele.start.substr(11,5)+\"~\"+ele.end.substr(11,5):\n                (ele.start < selectedStr[0])? \"00:00~\"+ele.end.substr(11,5):ele.start.substr(11,5)+\"~24:00\"\n                } : {ele.title}</div>\n                </div>))\n              }\n            </ul>\n          </div>\n        <div id=\"external-events\" className=\"todo\">\n            <div className=\"title-form\">\n            <RoughNotation type=\"highlight\" show=\"true\" className=\"title\" color=\" rgb(190, 226, 229)\" animationDelay=\"2000\">TODO</RoughNotation>\n            <RoughNotation type=\"circle\" show=\"true\" className=\"subtitle\" color=\" rgb(51, 173, 255)\" animationDelay=\"3000\">drag it !</RoughNotation>\n            </div>\n            {todoEvents.map((event,i) => (\n              <div className=\"todoitem\" title={event.title} data={event._id} color={event.color} key={i}>\n                <i class=\"fas fa-angle-right\"></i> {event.title}\n              </div>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction renderEventContent(eventInfo) {\n  return (\n    <>\n      <b>{eventInfo.timeText} </b>\n      <i>{eventInfo.event.title}</i>\n    </>\n  )\n}\n// function renderSidebarEvent(event) {\n//   return (\n//     <li key={event.id}>\n//       <b>{formatDate(event.start, {year: 'numeric', month: 'short', day: 'numeric'})}</b>\n//       <i>{event.title}</i>\n//     </li>\n//   )\n// }","/home/cathy/Love-Diary/src/components/Login/SignUpButton.js",[],"/home/cathy/Love-Diary/src/components/Home/Timeline.js",["84","85"],"import React, { useState , useEffect } from \"react\";\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\nimport axios from 'axios'\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport \"./Home.css\";\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: 这将从 palette.primary.main 中进行计算，\n      main: '#7FBAF4',\n      // dark: 这将从 palette.primary.main 中进行计算，\n      // contrastText: 这将计算与 palette.primary.main 的对比度\n    },\n    secondary: {\n      //light: '#0066ff',\n      main: '#5891ED',\n      // dark: 这将从 palette.secondary.main 中进行计算，\n      //contrastText: '#ffcc00',\n    },\n    info: {\n        main: \"#677DBB\"\n    },\n    // 使用 `getContrastText()` 来最大化\n    // 背景和文本的对比度\n    contrastThreshold: 3,\n    // 使用下面的函数用于将颜色的亮度在其调色板中\n    // 移动大约两个指数。\n    // 例如，从红色 500（Red 500）切换到 红色 300（Red 300）或 红色 700（Red 700）。\n    tonalOffset: 0.2,\n  },\n});\n\n\nconst API_ROOT = 'http://love-diary.anyday.com.tw:4000/api'\nconst instance = axios.create({\n  baseURL: API_ROOT\n})\n\nfunction colorIndex(i){\n    if(i%2===0) return \"primary\"\n    else return \"secondary\"\n}\n\nfunction MyTimeline({accountId}){\n    const [favEvents, setFavEvents] = useState([]);\n    const _getFavEvents = async () =>{\n        const {\n            data: { message, events }\n        } = await instance.get('/getFavEvents', { params: { accountId } });\n        setFavEvents(events);\n        //console.log(events);\n    }\n\n    useEffect(()=>{\n        _getFavEvents();\n    },[]);\n\n    return(\n        <div className=\"font_F timeline\">\n            <ThemeProvider theme={theme}>\n                <Timeline align=\"alternate\">\n                    {favEvents.map((e, i)=>(\n                        <TimelineItem>\n                            <TimelineOppositeContent>\n                                {e.start}\n                            </TimelineOppositeContent>\n                            <TimelineSeparator>\n                                <TimelineDot color={colorIndex(i)}/>\n                                <TimelineConnector />\n                            </TimelineSeparator>\n                            <TimelineContent>{e.title}</TimelineContent>\n                        </TimelineItem>\n                    ))}\n                    <TimelineItem>\n                        <TimelineSeparator>\n                        <TimelineDot />\n                        </TimelineSeparator>\n                        <TimelineContent>To be Continued...</TimelineContent>\n                    </TimelineItem>\n                </Timeline>\n            </ThemeProvider>\n        </div>\n        \n        \n    )\n}\nexport default MyTimeline;","/home/cathy/Love-Diary/src/components/Diary/PicturesWall.js",["86","87","88","89"],"import {React, useState, useEffect} from 'react';\nimport axios from 'axios'\nimport {SyncOutlined } from '@ant-design/icons';\nconst API_ROOT = 'http://love-diary.anyday.com.tw:4000/api'\nconst instance = axios.create({\n  baseURL: API_ROOT\n})\nexport default function PicturesWall({dateStr, accountId, photoText, photoText_onChange}){\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [isInDatabase, setIsInDatabase] = useState(false);\n  \n    const _getPhoto = async() =>{\n        const {\n            data: { message, url}\n        } = await instance.get('/getPhoto',{ params: { accountId, dateStr}});\n        //console.log(\"backend url:\");\n        //console.log(url);\n        if(message===\"exist\"){\n            //console.log(\"getPhoto\");\n            setImageUrl(url);\n            setIsInDatabase(true);\n        }else{\n            setImageUrl(\"\");\n            setIsInDatabase(false);\n        }\n    }\n\n    const _addPhoto = async(photoURL)=>{\n      const {\n          data: { message}\n      } = await instance.post('/addPhoto',{ params: { accountId, dateStr, photoURL}});\n      if(message===\"success\") setIsInDatabase(true);\n    }\n\n    const _updatePhoto = async(photoURL)=>{\n      const {\n          data: { message}\n      } = await instance.post('/updatePhoto',{ params: { accountId, dateStr, photoURL}});\n      if(message === \"error\") alert(\"update photo error\")\n    }\n\n    useEffect(()=>{\n      if(dateStr!==undefined){\n          //console.log(\"useEffect\");\n          _getPhoto();\n      }\n    },[dateStr]);\n\n    \n  const uploadImage = ({}) => {\n    if(window.confirm(\"Upload ?\")){\n      const r = new XMLHttpRequest()\n      const d = new FormData()\n      const e = document.getElementsByClassName('input-image')[0].files[0]\n      var u\n\n      d.append('image', e)\n\n      r.open('POST', 'https://api.imgur.com/3/image/')\n      r.setRequestHeader('Authorization', `Client-ID 4e3b0d0edce7854`)\n      r.onreadystatechange = function () {\n        if(r.status === 200 && r.readyState === 4) {\n          let res = JSON.parse(r.responseText)\n          u = `https://i.imgur.com/${res.data.id}.png`\n        }      \n        setImageUrl(u);\n        //console.log(\"url:\"+u);\n        if(u!==\"\" && u!==undefined && u!==null){\n          if(isInDatabase){\n            //console.log(\"_update\")\n            _updatePhoto(u);\n          }else{\n            //console.log(\"_add\")\n            _addPhoto(u);\n          }\n        }\n        \n      }\n      r.send(d);\n    }  \n  }\n\n  return (\n    <div>\n      <label className=\"uploadPhoto\">\n        {imageUrl? \n          <input type=\"button\" className=\"butn font_s\" value=\"Change Photo !\"/>:\n          <input type=\"button\" className=\"butn font_s\" value=\"Upload Photo !\"/>\n        }\n        <input type=\"file\" className=\"input-image\" onChange={uploadImage}/>\n      </label>\n      {imageUrl? <img className=\"photo midd\" alt=\"photo\" src={imageUrl}/>:<></>}\n      <div className=\"pic_contect_back\"></div>\n      <textarea value={photoText} onChange={photoText_onChange} className=\"pic_contect font_F\" placeholder=\"Someting about the photo...\"></textarea>\n    </div>\n  );\n}","/home/cathy/Love-Diary/src/components/Calendar/AddFormButton.js",[],"/home/cathy/Love-Diary/src/components/Login/SignUpForm.js",[],"/home/cathy/Love-Diary/src/components/Calendar/AddForm.js",["90"],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":86,"column":7,"nodeType":"97","endLine":86,"endColumn":16,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":17,"column":8,"nodeType":"97","endLine":17,"endColumn":10,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"101","line":120,"column":7,"nodeType":"97","endLine":120,"endColumn":16,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":156,"column":182,"nodeType":"105","endLine":156,"endColumn":198},{"ruleId":"106","severity":1,"message":"107","line":4,"column":24,"nodeType":"108","messageId":"109","endLine":4,"endColumn":34},{"ruleId":"106","severity":1,"message":"110","line":89,"column":15,"nodeType":"108","messageId":"109","endLine":89,"endColumn":22},{"ruleId":"106","severity":1,"message":"110","line":96,"column":15,"nodeType":"108","messageId":"109","endLine":96,"endColumn":22},{"ruleId":"106","severity":1,"message":"110","line":209,"column":15,"nodeType":"108","messageId":"109","endLine":209,"endColumn":22},{"ruleId":"95","severity":1,"message":"111","line":240,"column":6,"nodeType":"97","endLine":240,"endColumn":8,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":307,"column":42,"nodeType":"115","messageId":"116","endLine":307,"endColumn":44},{"ruleId":"113","severity":1,"message":"114","line":307,"column":72,"nodeType":"115","messageId":"116","endLine":307,"endColumn":74},{"ruleId":"113","severity":1,"message":"114","line":315,"column":40,"nodeType":"115","messageId":"116","endLine":315,"endColumn":42},{"ruleId":"113","severity":1,"message":"114","line":315,"column":70,"nodeType":"115","messageId":"116","endLine":315,"endColumn":72},{"ruleId":"106","severity":1,"message":"110","line":55,"column":21,"nodeType":"108","messageId":"109","endLine":55,"endColumn":28},{"ruleId":"95","severity":1,"message":"117","line":63,"column":7,"nodeType":"97","endLine":63,"endColumn":9,"suggestions":"118"},{"ruleId":"106","severity":1,"message":"119","line":3,"column":9,"nodeType":"108","messageId":"109","endLine":3,"endColumn":21},{"ruleId":"95","severity":1,"message":"120","line":47,"column":7,"nodeType":"97","endLine":47,"endColumn":16,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":50,"column":24,"nodeType":"124","messageId":"125","endLine":50,"endColumn":26},{"ruleId":"126","severity":1,"message":"127","line":92,"column":18,"nodeType":"128","endLine":92,"endColumn":74},{"ruleId":"129","severity":1,"message":"130","line":131,"column":15,"nodeType":"128","endLine":131,"endColumn":82},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initAccount'. Either include it or remove the dependency array.","ArrayExpression",["133"],"React Hook useEffect has a missing dependency: 'accountInfo.startDate'. Either include it or remove the dependency array.",["134"],"React Hook useEffect has a missing dependency: '_getContent'. Either include it or remove the dependency array.",["135"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'formatDate' is defined but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_getDayEvents' and '_getTodoEvents'. Either include them or remove the dependency array.",["136"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has a missing dependency: '_getFavEvents'. Either include it or remove the dependency array.",["137"],"'SyncOutlined' is defined but never used.","React Hook useEffect has a missing dependency: '_getPhoto'. Either include it or remove the dependency array.",["138"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [initAcc, initAccount]",{"range":"151","text":"152"},"Update the dependencies array to be: [accountInfo.startDate]",{"range":"153","text":"154"},"Update the dependencies array to be: [_getContent, dateStr]",{"range":"155","text":"156"},"Update the dependencies array to be: [_getDayEvents, _getTodoEvents]",{"range":"157","text":"158"},"Update the dependencies array to be: [_getFavEvents]",{"range":"159","text":"160"},"Update the dependencies array to be: [_getPhoto, dateStr]",{"range":"161","text":"162"},[2798,2807],"[initAcc, initAccount]",[568,570],"[accountInfo.startDate]",[3228,3237],"[_getContent, dateStr]",[7892,7894],"[_getDayEvents, _getTodoEvents]",[1892,1894],"[_getFavEvents]",[1497,1506],"[_getPhoto, dateStr]"]