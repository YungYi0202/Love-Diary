{"ast":null,"code":"/*!\nFullCalendar v5.3.2\nDocs & License: https://fullcalendar.io/\n(c) 2020 Adam Shaw\n*/\nimport './main.css';\nimport { hasBgRendering, Splitter, createFormatter, createElement, ViewContextType, RenderHook, BaseComponent, createRef, diffDays, buildNavLinkData, WeekNumberRoot, getStickyHeaderDates, ViewRoot, SimpleScrollGrid, getStickyFooterScrollbar, NowTimer, NowIndicatorRoot, DateComponent, renderScrollShim, rangeContainsMarker, startOfDay, asRoughMs, createDuration, RefMap, PositionCache, sortEventSegs, compareByFieldSpecs, buildSegCompareObj, StandardEvent, DayCellContent, config, DayCellRoot, getSegMeta, buildEventRangeKey, BgEvent, renderFill, Fragment, memoize, addDurations, multiplyDuration, wholeDivideDurations, intersectRanges, Slicer, formatIsoTimeString, DayHeader, DaySeriesModel, DayTableModel, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\nimport { DayTable } from '@fullcalendar/daygrid';\n\nvar AllDaySplitter =\n/** @class */\nfunction (_super) {\n  __extends(AllDaySplitter, _super);\n\n  function AllDaySplitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AllDaySplitter.prototype.getKeyInfo = function () {\n    return {\n      allDay: {},\n      timed: {}\n    };\n  };\n\n  AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n    if (dateSpan.allDay) {\n      return ['allDay'];\n    }\n\n    return ['timed'];\n  };\n\n  AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n    if (!eventDef.allDay) {\n      return ['timed'];\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay'];\n    }\n\n    return ['allDay'];\n  };\n\n  return AllDaySplitter;\n}(Splitter);\n\nvar DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short'\n});\n\nfunction TimeColsAxisCell(props) {\n  var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-label', props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'];\n  return createElement(ViewContextType.Consumer, null, function (context) {\n    if (!props.isLabeled) {\n      return createElement(\"td\", {\n        className: classNames.join(' '),\n        \"data-time\": props.isoTimeStr\n      });\n    }\n\n    var dateEnv = context.dateEnv,\n        options = context.options,\n        viewApi = context.viewApi;\n    var labelFormat = // TODO: fully pre-parse\n    options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) : createFormatter(options.slotLabelFormat);\n    var hookProps = {\n      level: 0,\n      time: props.time,\n      date: dateEnv.toDate(props.date),\n      view: viewApi,\n      text: dateEnv.format(props.date, labelFormat)\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.slotLabelClassNames,\n      content: options.slotLabelContent,\n      defaultContent: renderInnerContent,\n      didMount: options.slotLabelDidMount,\n      willUnmount: options.slotLabelWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"td\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-time\": props.isoTimeStr\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\",\n        ref: innerElRef\n      }, innerContent)));\n    });\n  });\n}\n\nfunction renderInnerContent(props) {\n  return props.text;\n}\n\nvar TimeBodyAxis =\n/** @class */\nfunction (_super) {\n  __extends(TimeBodyAxis, _super);\n\n  function TimeBodyAxis() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeBodyAxis.prototype.render = function () {\n    return this.props.slatMetas.map(function (slatMeta) {\n      return createElement(\"tr\", {\n        key: slatMeta.key\n      }, createElement(TimeColsAxisCell, __assign({}, slatMeta)));\n    });\n  };\n\n  return TimeBodyAxis;\n}(BaseComponent);\n\nvar DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'short'\n});\nvar AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\n\nvar TimeColsView =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsView, _super);\n\n  function TimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n\n    _this.headerElRef = createRef();\n    _this.rootElRef = createRef();\n    _this.scrollerElRef = createRef();\n    _this.state = {\n      slatCoords: null\n    };\n\n    _this.handleScrollTopRequest = function (scrollTop) {\n      var scrollerEl = _this.scrollerElRef.current;\n\n      if (scrollerEl) {\n        // TODO: not sure how this could ever be null. weirdness with the reducer\n        scrollerEl.scrollTop = scrollTop;\n      }\n    };\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    _this.renderHeadAxis = function (frameHeight) {\n      if (frameHeight === void 0) {\n        frameHeight = '';\n      }\n\n      var options = _this.context.options;\n      var dateProfile = _this.props.dateProfile;\n      var range = dateProfile.renderRange;\n      var dayCnt = diffDays(range.start, range.end);\n      var navLinkAttrs = options.navLinks && dayCnt === 1 ? // only do in day views (to avoid doing in week views that dont need it)\n      {\n        'data-navlink': buildNavLinkData(range.start, 'week'),\n        tabIndex: 0\n      } : {};\n\n      if (options.weekNumbers) {\n        return createElement(WeekNumberRoot, {\n          date: range.start,\n          defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n        }, function (rootElRef, classNames, innerElRef, innerContent) {\n          return createElement(\"th\", {\n            ref: rootElRef,\n            className: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'].concat(classNames).join(' ')\n          }, createElement(\"div\", {\n            className: \"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\",\n            style: {\n              height: frameHeight\n            }\n          }, createElement(\"a\", __assign({\n            ref: innerElRef,\n            className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n          }, navLinkAttrs), innerContent)));\n        });\n      }\n\n      return createElement(\"th\", {\n        className: \"fc-timegrid-axis\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-axis-frame\",\n        style: {\n          height: frameHeight\n        }\n      }));\n    };\n    /* Table Component Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n    // but DayGrid still needs to have classNames on inner elements in order to measure.\n\n\n    _this.renderTableRowAxis = function (rowHeight) {\n      var _a = _this.context,\n          options = _a.options,\n          viewApi = _a.viewApi;\n      var hookProps = {\n        text: options.allDayText,\n        view: viewApi\n      };\n      return (// TODO: make reusable hook. used in list view too\n        createElement(RenderHook, {\n          hookProps: hookProps,\n          classNames: options.allDayClassNames,\n          content: options.allDayContent,\n          defaultContent: renderAllDayInner,\n          didMount: options.allDayDidMount,\n          willUnmount: options.allDayWillUnmount\n        }, function (rootElRef, classNames, innerElRef, innerContent) {\n          return createElement(\"td\", {\n            ref: rootElRef,\n            className: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'].concat(classNames).join(' ')\n          }, createElement(\"div\", {\n            className: 'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''),\n            style: {\n              height: rowHeight\n            }\n          }, createElement(\"span\", {\n            className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\",\n            ref: innerElRef\n          }, innerContent)));\n        })\n      );\n    };\n\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n    };\n\n    return _this;\n  } // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n\n  TimeColsView.prototype.renderSimpleLayout = function (headerRowContent, allDayContent, timeContent) {\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    var sections = [];\n    var stickyHeaderDates = getStickyHeaderDates(context.options);\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: {\n          content: allDayContent\n        }\n      });\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }\n    });\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.rootElRef\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        className: ['fc-timegrid'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(SimpleScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        cols: [{\n          width: 'shrink'\n        }],\n        sections: sections\n      }));\n    });\n  };\n\n  TimeColsView.prototype.renderHScrollLayout = function (headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n    var _this = this;\n\n    var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    var stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    var stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    var sections = [];\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: function (arg) {\n            return createElement(\"tr\", null, _this.renderHeadAxis(arg.rowSyncHeights[0]));\n          }\n        }, {\n          key: 'cols',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: function (contentArg) {\n            return createElement(\"tr\", null, _this.renderTableRowAxis(contentArg.rowSyncHeights[0]));\n          }\n        }, {\n          key: 'cols',\n          content: allDayContent\n        }]\n      });\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          colSpan: 2,\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n\n    var isNowIndicator = context.options.nowIndicator;\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [{\n        key: 'axis',\n        content: function (arg) {\n          return (// TODO: make this now-indicator arrow more DRY with TimeColsContent\n            createElement(\"div\", {\n              className: \"fc-timegrid-axis-chunk\"\n            }, createElement(\"table\", {\n              style: {\n                height: arg.expandRows ? arg.clientHeight : ''\n              }\n            }, arg.tableColGroupNode, createElement(\"tbody\", null, createElement(TimeBodyAxis, {\n              slatMetas: slatMetas\n            }))), createElement(\"div\", {\n              className: \"fc-timegrid-now-indicator-container\"\n            }, createElement(NowTimer, {\n              unit: isNowIndicator ? 'minute' : 'day'\n              /* hacky */\n\n            }, function (nowDate) {\n              var nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n\n              if (typeof nowIndicatorTop === 'number') {\n                return createElement(NowIndicatorRoot, {\n                  isAxis: true,\n                  date: nowDate\n                }, function (rootElRef, classNames, innerElRef, innerContent) {\n                  return createElement(\"div\", {\n                    ref: rootElRef,\n                    className: ['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),\n                    style: {\n                      top: nowIndicatorTop\n                    }\n                  }, innerContent);\n                });\n              }\n\n              return null;\n            })))\n          );\n        }\n      }, {\n        key: 'cols',\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }]\n    });\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'axis',\n          content: renderScrollShim\n        }, {\n          key: 'cols',\n          content: renderScrollShim\n        }]\n      });\n    }\n\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.rootElRef\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        className: ['fc-timegrid'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        colGroups: [{\n          width: 'shrink',\n          cols: [{\n            width: 'shrink'\n          }]\n        }, {\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    });\n  };\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeColsView.prototype.getAllDayMaxEventProps = function () {\n    var _a = this.context.options,\n        dayMaxEvents = _a.dayMaxEvents,\n        dayMaxEventRows = _a.dayMaxEventRows;\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) {\n      // is auto?\n      dayMaxEvents = undefined;\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n    }\n\n    return {\n      dayMaxEvents: dayMaxEvents,\n      dayMaxEventRows: dayMaxEventRows\n    };\n  };\n\n  return TimeColsView;\n}(DateComponent);\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\n\nvar TimeColsSlatsCoords =\n/** @class */\nfunction () {\n  function TimeColsSlatsCoords(positions, dateProfile, slatMetas) {\n    this.positions = positions;\n    this.dateProfile = dateProfile;\n    this.slatMetas = slatMetas;\n  }\n\n  TimeColsSlatsCoords.prototype.safeComputeTop = function (date) {\n    var dateProfile = this.dateProfile;\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      var startOfDayDate = startOfDay(date);\n      var timeMs = date.valueOf() - startOfDayDate.valueOf();\n\n      if (timeMs >= asRoughMs(dateProfile.slotMinTime) && timeMs < asRoughMs(dateProfile.slotMaxTime)) {\n        return this.computeTimeTop(createDuration(timeMs));\n      }\n    }\n\n    return null;\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n\n\n  TimeColsSlatsCoords.prototype.computeDateTop = function (when, startOfDayDate) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when);\n    }\n\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n\n\n  TimeColsSlatsCoords.prototype.computeTimeTop = function (duration) {\n    var _a = this,\n        positions = _a.positions,\n        dateProfile = _a.dateProfile,\n        slatMetas = _a.slatMetas;\n\n    var len = positions.els.length; // we assume dates are uniform\n\n    var slotDurationMs = slatMetas[1].date.valueOf() - slatMetas[0].date.valueOf(); // floating-point value of # of slots covered\n\n    var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / slotDurationMs;\n    var slatIndex;\n    var slatRemainder; // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n\n    slatCoverage = Math.max(0, slatCoverage);\n    slatCoverage = Math.min(len, slatCoverage); // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n\n    slatIndex = Math.floor(slatCoverage);\n    slatIndex = Math.min(slatIndex, len - 1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n\n    slatRemainder = slatCoverage - slatIndex;\n    return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n  };\n\n  return TimeColsSlatsCoords;\n}();\n\nvar TimeColsSlatsBody =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsSlatsBody, _super);\n\n  function TimeColsSlatsBody() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColsSlatsBody.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var options = context.options;\n    var slatElRefs = props.slatElRefs;\n    return createElement(\"tbody\", null, props.slatMetas.map(function (slatMeta, i) {\n      var hookProps = {\n        time: slatMeta.time,\n        date: context.dateEnv.toDate(slatMeta.date),\n        view: context.viewApi\n      };\n      var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-lane', slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor'];\n      return createElement(\"tr\", {\n        key: slatMeta.key,\n        ref: slatElRefs.createRef(slatMeta.key)\n      }, props.axis && createElement(TimeColsAxisCell, __assign({}, slatMeta)), createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.slotLaneClassNames,\n        content: options.slotLaneContent,\n        didMount: options.slotLaneDidMount,\n        willUnmount: options.slotLaneWillUnmount\n      }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          ref: rootElRef,\n          className: classNames.concat(customClassNames).join(' '),\n          \"data-time\": slatMeta.isoTimeStr\n        }, innerContent);\n      }));\n    }));\n  };\n\n  return TimeColsSlatsBody;\n}(BaseComponent);\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\n\nvar TimeColsSlats =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsSlats, _super);\n\n  function TimeColsSlats() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rootElRef = createRef();\n    _this.slatElRefs = new RefMap();\n    return _this;\n  }\n\n  TimeColsSlats.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    return createElement(\"div\", {\n      className: \"fc-timegrid-slots\",\n      ref: this.rootElRef\n    }, createElement(\"table\", {\n      className: context.theme.getClass('table'),\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth,\n        height: props.minHeight\n      }\n    }, props.tableColGroupNode\n    /* relies on there only being a single <col> for the axis */\n    , createElement(TimeColsSlatsBody, {\n      slatElRefs: this.slatElRefs,\n      axis: props.axis,\n      slatMetas: props.slatMetas\n    })));\n  };\n\n  TimeColsSlats.prototype.componentDidMount = function () {\n    this.updateSizing();\n  };\n\n  TimeColsSlats.prototype.componentDidUpdate = function () {\n    this.updateSizing();\n  };\n\n  TimeColsSlats.prototype.componentWillUnmount = function () {\n    if (this.props.onCoords) {\n      this.props.onCoords(null);\n    }\n  };\n\n  TimeColsSlats.prototype.updateSizing = function () {\n    var props = this.props;\n\n    if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n        var rootEl = this.rootElRef.current;\n\n        if (rootEl.offsetHeight) {\n          // not hidden by css\n          props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, props.slatMetas));\n        }\n      }\n  };\n\n  return TimeColsSlats;\n}(BaseComponent);\n\nfunction collectSlatEls(elMap, slatMetas) {\n  return slatMetas.map(function (slatMeta) {\n    return elMap[slatMeta.key];\n  });\n}\n\nfunction splitSegsByCol(segs, colCnt) {\n  var segsByCol = [];\n  var i;\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([]);\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n  }\n\n  return segsByCol;\n}\n\nfunction splitInteractionByCol(ui, colCnt) {\n  var byRow = [];\n\n  if (!ui) {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n\n    for (var _i = 0, _a = ui.segs; _i < _a.length; _i++) {\n      var seg = _a[_i];\n      byRow[seg.col].segs.push(seg);\n    }\n  }\n\n  return byRow;\n} // UNFORTUNATELY, assigns results to the top/bottom/level/forwardCoord/backwardCoord props of the actual segs.\n// TODO: return hash (by instanceId) of results\n\n\nfunction computeSegCoords(segs, dayDate, slatCoords, eventMinHeight, eventOrderSpecs) {\n  computeSegVerticals(segs, dayDate, slatCoords, eventMinHeight);\n  return computeSegHorizontals(segs, eventOrderSpecs); // requires top/bottom from computeSegVerticals\n} // For each segment in an array, computes and assigns its top and bottom properties\n\n\nfunction computeSegVerticals(segs, dayDate, slatCoords, eventMinHeight) {\n  for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n    var seg = segs_1[_i];\n    seg.top = slatCoords.computeDateTop(seg.start, dayDate);\n    seg.bottom = Math.max(seg.top + (eventMinHeight || 0), // yuck\n    slatCoords.computeDateTop(seg.end, dayDate));\n  }\n} // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n// Assumed the segs are already ordered.\n// NOTE: Also reorders the given array by date!\n\n\nfunction computeSegHorizontals(segs, eventOrderSpecs) {\n  // IMPORTANT TO CLEAR OLD RESULTS :(\n  for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n    var seg = segs_2[_i];\n    seg.level = null;\n    seg.forwardCoord = null;\n    seg.backwardCoord = null;\n    seg.forwardPressure = null;\n  }\n\n  segs = sortEventSegs(segs, eventOrderSpecs);\n  var level0;\n  var levels = buildSlotSegLevels(segs);\n  computeForwardSlotSegs(levels);\n\n  if (level0 = levels[0]) {\n    for (var _a = 0, level0_1 = level0; _a < level0_1.length; _a++) {\n      var seg = level0_1[_a];\n      computeSlotSegPressures(seg);\n    }\n\n    for (var _b = 0, level0_2 = level0; _b < level0_2.length; _b++) {\n      var seg = level0_2[_b];\n      computeSegForwardBack(seg, 0, 0, eventOrderSpecs);\n    }\n  }\n\n  return segs;\n} // Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\n\n\nfunction buildSlotSegLevels(segs) {\n  var levels = [];\n  var i;\n  var seg;\n  var j;\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i]; // go through all the levels and stop on the first level where there are no collisions\n\n    for (j = 0; j < levels.length; j += 1) {\n      if (!computeSlotSegCollisions(seg, levels[j]).length) {\n        break;\n      }\n    }\n\n    seg.level = j;\n    (levels[j] || (levels[j] = [])).push(seg);\n  }\n\n  return levels;\n} // Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\n\n\nfunction computeSlotSegCollisions(seg, otherSegs, results) {\n  if (results === void 0) {\n    results = [];\n  }\n\n  for (var i = 0; i < otherSegs.length; i += 1) {\n    if (isSlotSegCollision(seg, otherSegs[i])) {\n      results.push(otherSegs[i]);\n    }\n  }\n\n  return results;\n} // Do these segments occupy the same vertical space?\n\n\nfunction isSlotSegCollision(seg1, seg2) {\n  return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n} // For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\n\n\nfunction computeForwardSlotSegs(levels) {\n  var i;\n  var level;\n  var j;\n  var seg;\n  var k;\n\n  for (i = 0; i < levels.length; i += 1) {\n    level = levels[i];\n\n    for (j = 0; j < level.length; j += 1) {\n      seg = level[j];\n      seg.forwardSegs = [];\n\n      for (k = i + 1; k < levels.length; k += 1) {\n        computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n      }\n    }\n  }\n} // Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\n\n\nfunction computeSlotSegPressures(seg) {\n  var forwardSegs = seg.forwardSegs;\n  var forwardPressure = 0;\n  var i;\n  var forwardSeg;\n\n  if (seg.forwardPressure == null) {\n    // not already computed\n    for (i = 0; i < forwardSegs.length; i += 1) {\n      forwardSeg = forwardSegs[i]; // figure out the child's maximum forward path\n\n      computeSlotSegPressures(forwardSeg); // either use the existing maximum, or use the child's forward pressure\n      // plus one (for the forwardSeg itself)\n\n      forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n    }\n\n    seg.forwardPressure = forwardPressure;\n  }\n} // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n// seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n//\n// The segment might be part of a \"series\", which means consecutive segments with the same pressure\n// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n// segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n// coordinate of the first segment in the series.\n\n\nfunction computeSegForwardBack(seg, seriesBackwardPressure, seriesBackwardCoord, eventOrderSpecs) {\n  var forwardSegs = seg.forwardSegs;\n  var i;\n\n  if (seg.forwardCoord == null) {\n    // not already computed\n    if (!forwardSegs.length) {\n      // if there are no forward segments, this segment should butt up against the edge\n      seg.forwardCoord = 1;\n    } else {\n      // sort highest pressure first\n      sortForwardSegs(forwardSegs, eventOrderSpecs); // this segment's forwardCoord will be calculated from the backwardCoord of the\n      // highest-pressure forward segment.\n\n      computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord, eventOrderSpecs);\n      seg.forwardCoord = forwardSegs[0].backwardCoord;\n    } // calculate the backwardCoord from the forwardCoord. consider the series\n\n\n    seg.backwardCoord = seg.forwardCoord - (seg.forwardCoord - seriesBackwardCoord) / ( // available width for series\n    seriesBackwardPressure + 1); // # of segments in the series\n    // use this segment's coordinates to computed the coordinates of the less-pressurized\n    // forward segments\n\n    for (i = 0; i < forwardSegs.length; i += 1) {\n      computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord, eventOrderSpecs);\n    }\n  }\n}\n\nfunction sortForwardSegs(forwardSegs, eventOrderSpecs) {\n  var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n  var specs = [// put higher-pressure first\n  {\n    field: 'forwardPressure',\n    order: -1\n  }, // put segments that are closer to initial edge first (and favor ones with no coords yet)\n  {\n    field: 'backwardCoord',\n    order: 1\n  }].concat(eventOrderSpecs);\n  objs.sort(function (obj0, obj1) {\n    return compareByFieldSpecs(obj0, obj1, specs);\n  });\n  return objs.map(function (c) {\n    return c._seg;\n  });\n}\n\nfunction buildTimeGridSegCompareObj(seg) {\n  var obj = buildSegCompareObj(seg);\n  obj.forwardPressure = seg.forwardPressure;\n  obj.backwardCoord = seg.backwardCoord;\n  return obj;\n}\n\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false\n});\n\nvar TimeColEvent =\n/** @class */\nfunction (_super) {\n  __extends(TimeColEvent, _super);\n\n  function TimeColEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColEvent.prototype.render = function () {\n    var classNames = ['fc-timegrid-event', 'fc-v-event'];\n\n    if (this.props.isCondensed) {\n      classNames.push('fc-timegrid-event-condensed');\n    }\n\n    return createElement(StandardEvent, __assign({}, this.props, {\n      defaultTimeFormat: DEFAULT_TIME_FORMAT,\n      extraClassNames: classNames\n    }));\n  };\n\n  return TimeColEvent;\n}(BaseComponent);\n\nvar TimeColMisc =\n/** @class */\nfunction (_super) {\n  __extends(TimeColMisc, _super);\n\n  function TimeColMisc() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeColMisc.prototype.render = function () {\n    var props = this.props;\n    return createElement(DayCellContent, {\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }, function (innerElRef, innerContent) {\n      return innerContent && createElement(\"div\", {\n        className: \"fc-timegrid-col-misc\",\n        ref: innerElRef\n      }, innerContent);\n    });\n  };\n\n  return TimeColMisc;\n}(BaseComponent);\n\nconfig.timeGridEventCondensedHeight = 30;\n\nvar TimeCol =\n/** @class */\nfunction (_super) {\n  __extends(TimeCol, _super);\n\n  function TimeCol() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeCol.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var isSelectMirror = context.options.selectMirror;\n    var mirrorSegs = props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n    var interactionAffectedInstances = // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    return createElement(DayCellRoot, {\n      elRef: props.elRef,\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }, function (rootElRef, classNames, dataAttrs) {\n      return createElement(\"td\", __assign({\n        ref: rootElRef,\n        className: ['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')\n      }, dataAttrs, props.extraDataAttrs), createElement(\"div\", {\n        className: \"fc-timegrid-col-frame\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-col-bg\"\n      }, _this.renderFillSegs(props.businessHourSegs, 'non-business'), _this.renderFillSegs(props.bgEventSegs, 'bg-event'), _this.renderFillSegs(props.dateSelectionSegs, 'highlight')), createElement(\"div\", {\n        className: \"fc-timegrid-col-events\"\n      }, _this.renderFgSegs(props.fgEventSegs, interactionAffectedInstances)), createElement(\"div\", {\n        className: \"fc-timegrid-col-events\"\n      }, _this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror))), createElement(\"div\", {\n        className: \"fc-timegrid-now-indicator-container\"\n      }, _this.renderNowIndicator(props.nowIndicatorSegs)), createElement(TimeColMisc, {\n        date: props.date,\n        dateProfile: props.dateProfile,\n        todayRange: props.todayRange,\n        extraHookProps: props.extraHookProps\n      })));\n    });\n  };\n\n  TimeCol.prototype.renderFgSegs = function (segs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    var props = this.props;\n\n    if (props.forPrint) {\n      return this.renderPrintFgSegs(segs);\n    }\n\n    if (props.slatCoords) {\n      return this.renderPositionedFgSegs(segs, segIsInvisible, isDragging, isResizing, isDateSelecting);\n    }\n\n    return null;\n  };\n\n  TimeCol.prototype.renderPrintFgSegs = function (segs) {\n    var _a = this,\n        props = _a.props,\n        context = _a.context; // not DRY\n\n\n    segs = sortEventSegs(segs, context.options.eventOrder);\n    return segs.map(function (seg) {\n      return createElement(\"div\", {\n        className: \"fc-timegrid-event-harness\",\n        key: seg.eventRange.instance.instanceId\n      }, createElement(TimeColEvent, __assign({\n        seg: seg,\n        isDragging: false,\n        isResizing: false,\n        isDateSelecting: false,\n        isSelected: false,\n        isCondensed: false\n      }, getSegMeta(seg, props.todayRange, props.nowDate))));\n    });\n  };\n\n  TimeCol.prototype.renderPositionedFgSegs = function (segs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    var _this = this;\n\n    var _a = this,\n        context = _a.context,\n        props = _a.props; // assigns TO THE SEGS THEMSELVES\n    // also, receives resorted array\n\n\n    segs = computeSegCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight, context.options.eventOrder);\n    return segs.map(function (seg) {\n      var instanceId = seg.eventRange.instance.instanceId;\n      var isMirror = isDragging || isResizing || isDateSelecting;\n      var positionCss = isMirror // will span entire column width\n      // also, won't assign z-index, which is good, fc-event-mirror will overpower other harnesses\n      ? __assign({\n        left: 0,\n        right: 0\n      }, _this.computeSegTopBottomCss(seg)) : _this.computeFgSegPositionCss(seg);\n      return createElement(\"div\", {\n        className: 'fc-timegrid-event-harness' + (seg.level > 0 ? ' fc-timegrid-event-harness-inset' : ''),\n        key: instanceId,\n        style: __assign({\n          visibility: segIsInvisible[instanceId] ? 'hidden' : ''\n        }, positionCss)\n      }, createElement(TimeColEvent, __assign({\n        seg: seg,\n        isDragging: isDragging,\n        isResizing: isResizing,\n        isDateSelecting: isDateSelecting,\n        isSelected: instanceId === props.eventSelection,\n        isCondensed: seg.bottom - seg.top < config.timeGridEventCondensedHeight\n      }, getSegMeta(seg, props.todayRange, props.nowDate))));\n    });\n  };\n\n  TimeCol.prototype.renderFillSegs = function (segs, fillType) {\n    var _this = this;\n\n    var _a = this,\n        context = _a.context,\n        props = _a.props;\n\n    if (!props.slatCoords) {\n      return null;\n    } // BAD: assigns TO THE SEGS THEMSELVES\n\n\n    computeSegVerticals(segs, props.date, props.slatCoords, context.options.eventMinHeight);\n    var children = segs.map(function (seg) {\n      return createElement(\"div\", {\n        key: buildEventRangeKey(seg.eventRange),\n        className: \"fc-timegrid-bg-harness\",\n        style: _this.computeSegTopBottomCss(seg)\n      }, fillType === 'bg-event' ? createElement(BgEvent, __assign({\n        seg: seg\n      }, getSegMeta(seg, props.todayRange, props.nowDate))) : renderFill(fillType));\n    });\n    return createElement(Fragment, null, children);\n  };\n\n  TimeCol.prototype.renderNowIndicator = function (segs) {\n    var _a = this.props,\n        slatCoords = _a.slatCoords,\n        date = _a.date;\n\n    if (!slatCoords) {\n      return null;\n    }\n\n    return segs.map(function (seg, i) {\n      return createElement(NowIndicatorRoot, {\n        isAxis: false,\n        date: date,\n        // key doesn't matter. will only ever be one\n        key: i\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"div\", {\n          ref: rootElRef,\n          className: ['fc-timegrid-now-indicator-line'].concat(classNames).join(' '),\n          style: {\n            top: slatCoords.computeDateTop(seg.start, date)\n          }\n        }, innerContent);\n      });\n    });\n  };\n\n  TimeCol.prototype.computeFgSegPositionCss = function (seg) {\n    var _a = this.context,\n        isRtl = _a.isRtl,\n        options = _a.options;\n    var shouldOverlap = options.slotEventOverlap;\n    var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n\n    var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n\n    var left; // amount of space from left edge, a fraction of the total width\n\n    var right; // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n    }\n\n    if (isRtl) {\n      left = 1 - forwardCoord;\n      right = backwardCoord;\n    } else {\n      left = backwardCoord;\n      right = 1 - forwardCoord;\n    }\n\n    var props = {\n      zIndex: seg.level + 1,\n      left: left * 100 + '%',\n      right: right * 100 + '%'\n    };\n\n    if (shouldOverlap && seg.forwardPressure) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n    }\n\n    return __assign(__assign({}, props), this.computeSegTopBottomCss(seg));\n  };\n\n  TimeCol.prototype.computeSegTopBottomCss = function (seg) {\n    return {\n      top: seg.top,\n      bottom: -seg.bottom\n    };\n  };\n\n  return TimeCol;\n}(BaseComponent);\n\nvar TimeColsContent =\n/** @class */\nfunction (_super) {\n  __extends(TimeColsContent, _super);\n\n  function TimeColsContent() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.splitFgEventSegs = memoize(splitSegsByCol);\n    _this.splitBgEventSegs = memoize(splitSegsByCol);\n    _this.splitBusinessHourSegs = memoize(splitSegsByCol);\n    _this.splitNowIndicatorSegs = memoize(splitSegsByCol);\n    _this.splitDateSelectionSegs = memoize(splitSegsByCol);\n    _this.splitEventDrag = memoize(splitInteractionByCol);\n    _this.splitEventResize = memoize(splitInteractionByCol);\n    _this.rootElRef = createRef();\n    _this.cellElRefs = new RefMap();\n    return _this;\n  }\n\n  TimeColsContent.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n\n    var colCnt = props.cells.length;\n    var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n    var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n    var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n    var nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n    var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n    var eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n    var eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n    return createElement(\"div\", {\n      className: \"fc-timegrid-cols\",\n      ref: this.rootElRef\n    }, createElement(\"table\", {\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth\n      }\n    }, props.tableColGroupNode, createElement(\"tbody\", null, createElement(\"tr\", null, props.axis && createElement(\"td\", {\n      className: \"fc-timegrid-col fc-timegrid-axis\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-col-frame\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-now-indicator-container\"\n    }, typeof nowIndicatorTop === 'number' && createElement(NowIndicatorRoot, {\n      isAxis: true,\n      date: props.nowDate\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),\n        style: {\n          top: nowIndicatorTop\n        }\n      }, innerContent);\n    })))), props.cells.map(function (cell, i) {\n      return createElement(TimeCol, {\n        key: cell.key,\n        elRef: _this.cellElRefs.createRef(cell.key),\n        dateProfile: props.dateProfile,\n        date: cell.date,\n        nowDate: props.nowDate,\n        todayRange: props.todayRange,\n        extraHookProps: cell.extraHookProps,\n        extraDataAttrs: cell.extraDataAttrs,\n        extraClassNames: cell.extraClassNames,\n        fgEventSegs: fgEventSegsByRow[i],\n        bgEventSegs: bgEventSegsByRow[i],\n        businessHourSegs: businessHourSegsByRow[i],\n        nowIndicatorSegs: nowIndicatorSegsByRow[i],\n        dateSelectionSegs: dateSelectionSegsByRow[i],\n        eventDrag: eventDragByRow[i],\n        eventResize: eventResizeByRow[i],\n        slatCoords: props.slatCoords,\n        eventSelection: props.eventSelection,\n        forPrint: props.forPrint\n      });\n    })))));\n  };\n\n  TimeColsContent.prototype.componentDidMount = function () {\n    this.updateCoords();\n  };\n\n  TimeColsContent.prototype.componentDidUpdate = function () {\n    this.updateCoords();\n  };\n\n  TimeColsContent.prototype.updateCoords = function () {\n    var props = this.props;\n\n    if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n        props.onColCoords(new PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, // horizontal\n        false));\n      }\n  };\n\n  return TimeColsContent;\n}(BaseComponent);\n\nfunction collectCellEls(elMap, cells) {\n  return cells.map(function (cell) {\n    return elMap[cell.key];\n  });\n}\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nvar TimeCols =\n/** @class */\nfunction (_super) {\n  __extends(TimeCols, _super);\n\n  function TimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.processSlotOptions = memoize(processSlotOptions);\n    _this.state = {\n      slatCoords: null\n    };\n\n    _this.handleScrollRequest = function (request) {\n      var onScrollTopRequest = _this.props.onScrollTopRequest;\n      var slatCoords = _this.state.slatCoords;\n\n      if (onScrollTopRequest && slatCoords) {\n        if (request.time) {\n          var top_1 = slatCoords.computeTimeTop(request.time);\n          top_1 = Math.ceil(top_1); // zoom can give weird floating-point values. rather scroll a little bit further\n\n          if (top_1) {\n            top_1 += 1; // to overcome top border that slots beyond the first have. looks better\n          }\n\n          onScrollTopRequest(top_1);\n        }\n\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleColCoords = function (colCoords) {\n      _this.colCoords = colCoords;\n    };\n\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n\n      if (_this.props.onSlatCoords) {\n        _this.props.onSlatCoords(slatCoords);\n      }\n    };\n\n    return _this;\n  }\n\n  TimeCols.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        state = _a.state;\n\n    return createElement(\"div\", {\n      className: \"fc-timegrid-body\",\n      ref: props.rootElRef,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(TimeColsSlats, {\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      slatMetas: props.slatMetas,\n      clientWidth: props.clientWidth,\n      minHeight: props.expandRows ? props.clientHeight : '',\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.axis ? props.tableColGroupNode : null\n      /* axis depends on the colgroup's shrinking */\n      ,\n      onCoords: this.handleSlatCoords\n    }), createElement(TimeColsContent, {\n      cells: props.cells,\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      businessHourSegs: props.businessHourSegs,\n      bgEventSegs: props.bgEventSegs,\n      fgEventSegs: props.fgEventSegs,\n      dateSelectionSegs: props.dateSelectionSegs,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      todayRange: props.todayRange,\n      nowDate: props.nowDate,\n      nowIndicatorSegs: props.nowIndicatorSegs,\n      clientWidth: props.clientWidth,\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.tableColGroupNode,\n      slatCoords: state.slatCoords,\n      onColCoords: this.handleColCoords,\n      forPrint: props.forPrint\n    }));\n  };\n\n  TimeCols.prototype.componentDidMount = function () {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n  };\n\n  TimeCols.prototype.componentDidUpdate = function (prevProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n  };\n\n  TimeCols.prototype.componentWillUnmount = function () {\n    this.scrollResponder.detach();\n  };\n\n  TimeCols.prototype.positionToHit = function (positionLeft, positionTop) {\n    var _a = this.context,\n        dateEnv = _a.dateEnv,\n        options = _a.options;\n    var colCoords = this.colCoords;\n    var dateProfile = this.props.dateProfile;\n    var slatCoords = this.state.slatCoords;\n\n    var _b = this.processSlotOptions(this.props.slotDuration, options.snapDuration),\n        snapDuration = _b.snapDuration,\n        snapsPerSlot = _b.snapsPerSlot;\n\n    var colIndex = colCoords.leftToIndex(positionLeft);\n    var slatIndex = slatCoords.positions.topToIndex(positionTop);\n\n    if (colIndex != null && slatIndex != null) {\n      var slatTop = slatCoords.positions.tops[slatIndex];\n      var slatHeight = slatCoords.positions.getHeight(slatIndex);\n      var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n\n      var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\n      var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n      var dayDate = this.props.cells[colIndex].date;\n      var time = addDurations(dateProfile.slotMinTime, multiplyDuration(snapDuration, snapIndex));\n      var start = dateEnv.add(dayDate, time);\n      var end = dateEnv.add(start, snapDuration);\n      return {\n        col: colIndex,\n        dateSpan: {\n          range: {\n            start: start,\n            end: end\n          },\n          allDay: false\n        },\n        dayEl: colCoords.els[colIndex],\n        relativeRect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        }\n      };\n    }\n\n    return null;\n  };\n\n  return TimeCols;\n}(BaseComponent);\n\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n  var snapDuration = snapDurationOverride || slotDuration;\n  var snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration;\n    snapsPerSlot = 1; // TODO: say warning?\n  }\n\n  return {\n    snapDuration: snapDuration,\n    snapsPerSlot: snapsPerSlot\n  };\n}\n\nvar DayTimeColsSlicer =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeColsSlicer, _super);\n\n  function DayTimeColsSlicer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DayTimeColsSlicer.prototype.sliceRange = function (range, dayRanges) {\n    var segs = [];\n\n    for (var col = 0; col < dayRanges.length; col += 1) {\n      var segRange = intersectRanges(range, dayRanges[col]);\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col: col\n        });\n      }\n    }\n\n    return segs;\n  };\n\n  return DayTimeColsSlicer;\n}(Slicer);\n\nvar DayTimeCols =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeCols, _super);\n\n  function DayTimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildDayRanges = memoize(buildDayRanges);\n    _this.slicer = new DayTimeColsSlicer();\n    _this.timeColsRef = createRef();\n\n    _this.handleRootEl = function (rootEl) {\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n\n    return _this;\n  }\n\n  DayTimeCols.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var dateProfile = props.dateProfile,\n        dayTableModel = props.dayTableModel;\n    var isNowIndicator = context.options.nowIndicator;\n    var dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv); // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n\n    return createElement(NowTimer, {\n      unit: isNowIndicator ? 'minute' : 'day'\n    }, function (nowDate, todayRange) {\n      return createElement(TimeCols, __assign({\n        ref: _this.timeColsRef,\n        rootElRef: _this.handleRootEl\n      }, _this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n        forPrint: props.forPrint,\n        axis: props.axis,\n        dateProfile: dateProfile,\n        slatMetas: props.slatMetas,\n        slotDuration: props.slotDuration,\n        cells: dayTableModel.cells[0],\n        tableColGroupNode: props.tableColGroupNode,\n        tableMinWidth: props.tableMinWidth,\n        clientWidth: props.clientWidth,\n        clientHeight: props.clientHeight,\n        expandRows: props.expandRows,\n        nowDate: nowDate,\n        nowIndicatorSegs: isNowIndicator && _this.slicer.sliceNowDate(nowDate, context, dayRanges),\n        todayRange: todayRange,\n        onScrollTopRequest: props.onScrollTopRequest,\n        onSlatCoords: props.onSlatCoords\n      }));\n    });\n  };\n\n  DayTimeCols.prototype.queryHit = function (positionLeft, positionTop) {\n    var rawHit = this.timeColsRef.current.positionToHit(positionLeft, positionTop);\n\n    if (rawHit) {\n      return {\n        component: this,\n        dateSpan: rawHit.dateSpan,\n        dayEl: rawHit.dayEl,\n        rect: {\n          left: rawHit.relativeRect.left,\n          right: rawHit.relativeRect.right,\n          top: rawHit.relativeRect.top,\n          bottom: rawHit.relativeRect.bottom\n        },\n        layer: 0\n      };\n    }\n\n    return null;\n  };\n\n  return DayTimeCols;\n}(DateComponent);\n\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n  var ranges = [];\n\n  for (var _i = 0, _a = dayTableModel.headerDates; _i < _a.length; _i++) {\n    var date = _a[_i];\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime)\n    });\n  }\n\n  return ranges;\n} // potential nice values for the slot-duration and interval-duration\n// from largest to smallest\n\n\nvar STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\n\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n  var dayStart = new Date(0);\n  var slatTime = slotMinTime;\n  var slatIterator = createDuration(0);\n  var labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n  var metas = [];\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    var date = dateEnv.add(dayStart, slatTime);\n    var isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null;\n    metas.push({\n      date: date,\n      time: slatTime,\n      key: date.toISOString(),\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled: isLabeled\n    });\n    slatTime = addDurations(slatTime, slotDuration);\n    slatIterator = addDurations(slatIterator, slotDuration);\n  }\n\n  return metas;\n} // Computes an automatic value for slotLabelInterval\n\n\nfunction computeLabelInterval(slotDuration) {\n  var i;\n  var labelInterval;\n  var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label\n\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i]);\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval;\n    }\n  }\n\n  return slotDuration; // fall back\n}\n\nvar DayTimeColsView =\n/** @class */\nfunction (_super) {\n  __extends(DayTimeColsView, _super);\n\n  function DayTimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildTimeColsModel = memoize(buildTimeColsModel);\n    _this.buildSlatMetas = memoize(buildSlatMetas);\n    return _this;\n  }\n\n  DayTimeColsView.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.context,\n        options = _a.options,\n        dateEnv = _a.dateEnv,\n        dateProfileGenerator = _a.dateProfileGenerator;\n    var props = this.props;\n    var dateProfile = props.dateProfile;\n    var dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n    var splitProps = this.allDaySplitter.splitProps(props);\n    var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n    var dayMinWidth = options.dayMinWidth;\n    var hasAttachedAxis = !dayMinWidth;\n    var hasDetachedAxis = dayMinWidth;\n    var headerContent = options.dayHeaders && createElement(DayHeader, {\n      dates: dayTableModel.headerDates,\n      dateProfile: dateProfile,\n      datesRepDistinctDays: true,\n      renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n    });\n\n    var allDayContent = options.allDaySlot !== false && function (contentArg) {\n      return createElement(DayTable, __assign({}, splitProps.allDay, {\n        dateProfile: dateProfile,\n        dayTableModel: dayTableModel,\n        nextDayThreshold: options.nextDayThreshold,\n        tableMinWidth: contentArg.tableMinWidth,\n        colGroupNode: contentArg.tableColGroupNode,\n        renderRowIntro: hasAttachedAxis ? _this.renderTableRowAxis : null,\n        showWeekNumbers: false,\n        expandRows: false,\n        headerAlignElRef: _this.headerElRef,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        forPrint: props.forPrint\n      }, _this.getAllDayMaxEventProps()));\n    };\n\n    var timeGridContent = function (contentArg) {\n      return createElement(DayTimeCols, __assign({}, splitProps.timed, {\n        dayTableModel: dayTableModel,\n        dateProfile: dateProfile,\n        axis: hasAttachedAxis,\n        slotDuration: options.slotDuration,\n        slatMetas: slatMetas,\n        forPrint: props.forPrint,\n        tableColGroupNode: contentArg.tableColGroupNode,\n        tableMinWidth: contentArg.tableMinWidth,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        onSlatCoords: _this.handleSlatCoords,\n        expandRows: contentArg.expandRows,\n        onScrollTopRequest: _this.handleScrollTopRequest\n      }));\n    };\n\n    return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n  };\n\n  return DayTimeColsView;\n}(TimeColsView);\n\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, false);\n}\n\nvar OPTION_REFINERS = {\n  allDaySlot: Boolean\n};\nvar main = createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true\n    },\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\nexport default main;\nexport { DayTimeCols, DayTimeColsSlicer, DayTimeColsView, TimeCols, TimeColsSlatsCoords, TimeColsView, buildDayRanges, buildSlatMetas, buildTimeColsModel };","map":{"version":3,"sources":["src/AllDaySplitter.ts","src/TimeColsAxisCell.tsx","src/TimeBodyAxis.tsx","src/TimeColsView.tsx","src/TimeColsSlatsCoords.ts","src/TimeColsSlatsBody.tsx","src/TimeColsSlats.tsx","src/TimeColsSeg.ts","src/event-placement.ts","src/TimeColEvent.tsx","src/TimeColMisc.tsx","src/TimeCol.tsx","src/TimeColsContent.tsx","src/TimeCols.tsx","src/DayTimeColsSlicer.ts","src/DayTimeCols.tsx","src/time-slat-meta.ts","src/DayTimeColsView.tsx","src/options.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Splitter,\n  hasBgRendering,\n  EventDef,\n  DateSpan,\n} from '@fullcalendar/common'\n\nexport class AllDaySplitter extends Splitter {\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {},\n    }\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    if (dateSpan.allDay) {\n      return ['allDay']\n    }\n\n    return ['timed']\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    if (!eventDef.allDay) {\n      return ['timed']\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay']\n    }\n\n    return ['allDay']\n  }\n}\n","import {\n  createElement,\n  ViewContext,\n  createFormatter,\n  ViewContextType,\n  RenderHook,\n  SlotLabelContentArg,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short',\n})\n\nexport function TimeColsAxisCell(props: TimeSlatMeta) {\n  let classNames = [\n    'fc-timegrid-slot',\n    'fc-timegrid-slot-label',\n    props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor',\n  ]\n\n  return (\n    <ViewContextType.Consumer>\n      {(context: ViewContext) => {\n        if (!props.isLabeled) {\n          return (\n            <td className={classNames.join(' ')} data-time={props.isoTimeStr} />\n          )\n        }\n\n        let { dateEnv, options, viewApi } = context\n        let labelFormat = // TODO: fully pre-parse\n          options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT :\n            Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) :\n              createFormatter(options.slotLabelFormat)\n\n        let hookProps: SlotLabelContentArg = {\n          level: 0,\n          time: props.time,\n          date: dateEnv.toDate(props.date),\n          view: viewApi,\n          text: dateEnv.format(props.date, labelFormat),\n        }\n\n        return (\n          <RenderHook<SlotLabelContentArg> // needed?\n            hookProps={hookProps}\n            classNames={options.slotLabelClassNames}\n            content={options.slotLabelContent}\n            defaultContent={renderInnerContent}\n            didMount={options.slotLabelDidMount}\n            willUnmount={options.slotLabelWillUnmount}\n          >\n            {(rootElRef, customClassNames, innerElRef, innerContent) => (\n              <td ref={rootElRef} className={classNames.concat(customClassNames).join(' ')} data-time={props.isoTimeStr}>\n                <div className=\"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\">\n                  <div className=\"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\" ref={innerElRef}>\n                    {innerContent}\n                  </div>\n                </div>\n              </td>\n            )}\n          </RenderHook>\n        )\n      }}\n    </ViewContextType.Consumer>\n  )\n}\n\nfunction renderInnerContent(props) { // TODO: add types\n  return props.text\n}\n","import { createElement, BaseComponent } from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\n/* Thin Axis\n------------------------------------------------------------------------------------------------------------------*/\n\ninterface TimeBodyAxisProps {\n  slatMetas: TimeSlatMeta[]\n}\n\nexport class TimeBodyAxis extends BaseComponent<TimeBodyAxisProps> { // just <tr> content\n  render() {\n    return this.props.slatMetas.map((slatMeta: TimeSlatMeta) => (\n      <tr key={slatMeta.key}>\n        <TimeColsAxisCell {...slatMeta} />\n      </tr>\n    ))\n  }\n}\n","import {\n  createElement, createRef,\n  diffDays,\n  SimpleScrollGridSection,\n  VNode,\n  SimpleScrollGrid,\n  ChunkContentCallbackArgs,\n  ScrollGridSectionConfig,\n  buildNavLinkData,\n  ViewRoot,\n  WeekNumberRoot,\n  RenderHook,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  createFormatter,\n  AllDayContentArg,\n  CssDimValue,\n  NowTimer,\n  DateMarker,\n  NowIndicatorRoot,\n} from '@fullcalendar/common'\nimport { AllDaySplitter } from './AllDaySplitter'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeBodyAxis } from './TimeBodyAxis'\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'short' })\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5\n\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeCols subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\ninterface TimeColsViewState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\nexport abstract class TimeColsView extends DateComponent<ViewProps, TimeColsViewState> {\n  protected allDaySplitter = new AllDaySplitter() // for use by subclasses\n\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n  private rootElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n  private scrollerElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n\n  state = {\n    slatCoords: null,\n  }\n\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n  renderSimpleLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n  ) {\n    let { context, props } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: { content: allDayContent },\n      })\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr className=\"fc-scrollgrid-section\">\n            <td\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent,\n      },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              cols={[{ width: 'shrink' }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    colCnt: number,\n    dayMinWidth: number,\n    slatMetas: TimeSlatMeta[],\n    slatCoords: TimeColsSlatsCoords | null, // yuck\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { context, props } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (arg: ChunkContentCallbackArgs) => (\n              <tr>{this.renderHeadAxis(arg.rowSyncHeights[0])}</tr>\n            ),\n          },\n          {\n            key: 'cols',\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent,\n          },\n        ],\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (contentArg: ChunkContentCallbackArgs) => (\n              <tr>{this.renderTableRowAxis(contentArg.rowSyncHeights[0])}</tr>\n            ),\n          },\n          {\n            key: 'cols',\n            content: allDayContent,\n          },\n        ],\n      })\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr className=\"fc-scrollgrid-section\">\n            <td\n              colSpan={2}\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    let isNowIndicator = context.options.nowIndicator\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [\n        {\n          key: 'axis',\n          content: (arg) => (\n            // TODO: make this now-indicator arrow more DRY with TimeColsContent\n            <div className=\"fc-timegrid-axis-chunk\">\n              <table style={{ height: arg.expandRows ? arg.clientHeight : '' }}>\n                {arg.tableColGroupNode}\n                <tbody>\n                  <TimeBodyAxis slatMetas={slatMetas} />\n                </tbody>\n              </table>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                <NowTimer unit={isNowIndicator ? 'minute' : 'day' /* hacky */}>\n                  {(nowDate: DateMarker) => {\n                    let nowIndicatorTop =\n                      isNowIndicator &&\n                      slatCoords &&\n                      slatCoords.safeComputeTop(nowDate) // might return void\n\n                    if (typeof nowIndicatorTop === 'number') {\n                      return (\n                        <NowIndicatorRoot isAxis date={nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )\n                    }\n\n                    return null\n                  }}\n                </NowTimer>\n              </div>\n            </div>\n          ),\n        },\n        {\n          key: 'cols',\n          scrollerElRef: this.scrollerElRef,\n          content: timeContent,\n        },\n      ],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [\n          {\n            key: 'axis',\n            content: renderScrollShim,\n          },\n          {\n            key: 'cols',\n            content: renderScrollShim,\n          },\n        ],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              colGroups={[\n                { width: 'shrink', cols: [{ width: 'shrink' }] }, // TODO: allow no specify cols\n                { cols: [{ span: colCnt, minWidth: dayMinWidth }] },\n              ]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  handleScrollTopRequest = (scrollTop: number) => {\n    let scrollerEl = this.scrollerElRef.current\n\n    if (scrollerEl) { // TODO: not sure how this could ever be null. weirdness with the reducer\n      scrollerEl.scrollTop = scrollTop\n    }\n  }\n\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  getAllDayMaxEventProps() {\n    let { dayMaxEvents, dayMaxEventRows } = this.context.options\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) { // is auto?\n      dayMaxEvents = undefined\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS // make sure \"auto\" goes to a real number\n    }\n\n    return { dayMaxEvents, dayMaxEventRows }\n  }\n\n  /* Header Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  renderHeadAxis = (frameHeight: CssDimValue = '') => {\n    let { options } = this.context\n    let { dateProfile } = this.props\n    let range = dateProfile.renderRange\n    let dayCnt = diffDays(range.start, range.end)\n\n    let navLinkAttrs = (options.navLinks && dayCnt === 1) // only do in day views (to avoid doing in week views that dont need it)\n      ? { 'data-navlink': buildNavLinkData(range.start, 'week'), tabIndex: 0 }\n      : {}\n\n    if (options.weekNumbers) {\n      return (\n        <WeekNumberRoot date={range.start} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <th\n              ref={rootElRef}\n              className={[\n                'fc-timegrid-axis',\n                'fc-scrollgrid-shrink',\n              ].concat(classNames).join(' ')}\n            >\n              <div\n                className=\"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\"\n                style={{ height: frameHeight }}\n              >\n                <a\n                  ref={innerElRef}\n                  className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n                  {...navLinkAttrs}\n                >\n                  {innerContent}\n                </a>\n              </div>\n            </th>\n          )}\n        </WeekNumberRoot>\n      )\n    }\n\n    return (\n      <th className=\"fc-timegrid-axis\">\n        <div className=\"fc-timegrid-axis-frame\" style={{ height: frameHeight }} />\n      </th>\n    )\n  }\n\n  /* Table Component Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n  // but DayGrid still needs to have classNames on inner elements in order to measure.\n  renderTableRowAxis = (rowHeight?: number) => {\n    let { options, viewApi } = this.context\n    let hookProps: AllDayContentArg = {\n      text: options.allDayText,\n      view: viewApi,\n    }\n\n    return (\n      // TODO: make reusable hook. used in list view too\n      <RenderHook<AllDayContentArg>\n        hookProps={hookProps}\n        classNames={options.allDayClassNames}\n        content={options.allDayContent}\n        defaultContent={renderAllDayInner}\n        didMount={options.allDayDidMount}\n        willUnmount={options.allDayWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <td\n            ref={rootElRef}\n            className={[\n              'fc-timegrid-axis',\n              'fc-scrollgrid-shrink',\n            ].concat(classNames).join(' ')}\n          >\n            <div\n              className={'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : '')}\n              style={{ height: rowHeight }}\n            >\n              <span className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\" ref={innerElRef}>\n                {innerContent}\n              </span>\n            </div>\n          </td>\n        )}\n      </RenderHook>\n    )\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords) => {\n    this.setState({ slatCoords })\n  }\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  PositionCache,\n  DateMarker,\n  startOfDay,\n  createDuration,\n  asRoughMs,\n  DateProfile,\n  Duration,\n  rangeContainsMarker,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nexport class TimeColsSlatsCoords {\n  constructor(\n    public positions: PositionCache,\n    private dateProfile: DateProfile,\n    private slatMetas: TimeSlatMeta[],\n  ) {\n  }\n\n  safeComputeTop(date: DateMarker) { // TODO: DRY with computeDateTop\n    let { dateProfile } = this\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      let startOfDayDate = startOfDay(date)\n      let timeMs = date.valueOf() - startOfDayDate.valueOf()\n\n      if (\n        timeMs >= asRoughMs(dateProfile.slotMinTime) &&\n        timeMs < asRoughMs(dateProfile.slotMaxTime)\n      ) {\n        return this.computeTimeTop(createDuration(timeMs))\n      }\n    }\n\n    return null\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when: DateMarker, startOfDayDate?: DateMarker) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when)\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()))\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  computeTimeTop(duration: Duration): number {\n    let { positions, dateProfile, slatMetas } = this\n    let len = positions.els.length\n\n    // we assume dates are uniform\n    let slotDurationMs = slatMetas[1].date.valueOf() - slatMetas[0].date.valueOf()\n\n    // floating-point value of # of slots covered\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / slotDurationMs\n\n    let slatIndex\n    let slatRemainder\n\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage)\n    slatCoverage = Math.min(len, slatCoverage)\n\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage)\n    slatIndex = Math.min(slatIndex, len - 1)\n\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex\n\n    return positions.tops[slatIndex] +\n      positions.getHeight(slatIndex) * slatRemainder\n  }\n}\n","import {\n  createElement,\n  BaseComponent,\n  RefMap,\n  RenderHook,\n  SlotLaneContentArg,\n} from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nexport interface TimeColsSlatsBodyProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  slatElRefs: RefMap<HTMLTableRowElement>\n}\n\nexport class TimeColsSlatsBody extends BaseComponent<TimeColsSlatsBodyProps> {\n  render() {\n    let { props, context } = this\n    let { options } = context\n    let { slatElRefs } = props\n\n    return (\n      <tbody>\n        {props.slatMetas.map((slatMeta, i) => {\n          let hookProps: SlotLaneContentArg = {\n            time: slatMeta.time,\n            date: context.dateEnv.toDate(slatMeta.date),\n            view: context.viewApi,\n          }\n\n          let classNames = [\n            'fc-timegrid-slot',\n            'fc-timegrid-slot-lane',\n            slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor',\n          ]\n\n          return (\n            <tr\n              key={slatMeta.key}\n              ref={slatElRefs.createRef(slatMeta.key)}\n            >\n              {props.axis && (\n                <TimeColsAxisCell {...slatMeta} />\n              )}\n              <RenderHook\n                hookProps={hookProps}\n                classNames={options.slotLaneClassNames}\n                content={options.slotLaneContent}\n                didMount={options.slotLaneDidMount}\n                willUnmount={options.slotLaneWillUnmount}\n              >\n                {(rootElRef, customClassNames, innerElRef, innerContent) => (\n                  <td\n                    ref={rootElRef}\n                    className={classNames.concat(customClassNames).join(' ')}\n                    data-time={slatMeta.isoTimeStr}\n                  >\n                    {innerContent}\n                  </td>\n                )}\n              </RenderHook>\n            </tr>\n          )\n        })}\n      </tbody>\n    )\n  }\n}\n","import {\n  createElement,\n  VNode,\n  BaseComponent,\n  RefMap,\n  CssDimValue,\n  createRef,\n  PositionCache,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSlatsBody } from './TimeColsSlatsBody'\n\nexport interface TimeColsSlatsProps extends TimeColsSlatsContentProps {\n  dateProfile: DateProfile\n  clientWidth: number | null\n  minHeight: CssDimValue\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  onCoords?: (coords: TimeColsSlatsCoords | null) => void\n}\n\ninterface TimeColsSlatsContentProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\nexport class TimeColsSlats extends BaseComponent<TimeColsSlatsProps> {\n  private rootElRef = createRef<HTMLDivElement>()\n  private slatElRefs = new RefMap<HTMLTableRowElement>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <div className=\"fc-timegrid-slots\" ref={this.rootElRef}>\n        <table\n          className={context.theme.getClass('table')}\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n            height: props.minHeight,\n          }}\n        >\n          {props.tableColGroupNode /* relies on there only being a single <col> for the axis */}\n          <TimeColsSlatsBody\n            slatElRefs={this.slatElRefs}\n            axis={props.axis}\n            slatMetas={props.slatMetas}\n          />\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing()\n  }\n\n  componentDidUpdate() {\n    this.updateSizing()\n  }\n\n  componentWillUnmount() {\n    if (this.props.onCoords) {\n      this.props.onCoords(null)\n    }\n  }\n\n  updateSizing() {\n    let { props } = this\n\n    if (\n      props.onCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      let rootEl = this.rootElRef.current\n\n      if (rootEl.offsetHeight) { // not hidden by css\n        props.onCoords(\n          new TimeColsSlatsCoords(\n            new PositionCache(\n              this.rootElRef.current,\n              collectSlatEls(this.slatElRefs.currentMap, props.slatMetas),\n              false,\n              true, // vertical\n            ),\n            this.props.dateProfile,\n            props.slatMetas,\n          ),\n        )\n      }\n    }\n  }\n}\n\nfunction collectSlatEls(elMap: { [key: string]: HTMLElement }, slatMetas: TimeSlatMeta[]) {\n  return slatMetas.map((slatMeta) => elMap[slatMeta.key])\n}\n","import { DateMarker, Seg, EventSegUiInteractionState } from '@fullcalendar/common'\n\n// JUST A DATA STRUCTURE, not a component\n\nexport interface TimeColsSeg extends Seg {\n  col: number\n  start: DateMarker\n  end: DateMarker\n}\n\nexport function splitSegsByCol(segs: TimeColsSeg[] | null, colCnt: number) { // can be given null/undefined!\n  let segsByCol: TimeColsSeg[][] = []\n  let i\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([])\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i])\n    }\n  }\n\n  return segsByCol\n}\n\nexport function splitInteractionByCol(ui: EventSegUiInteractionState | null, colCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.col].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n","import { Seg, DateMarker, buildSegCompareObj, compareByFieldSpecs, sortEventSegs, OrderSpec, EventApi } from '@fullcalendar/common'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\n\n// UNFORTUNATELY, assigns results to the top/bottom/level/forwardCoord/backwardCoord props of the actual segs.\n// TODO: return hash (by instanceId) of results\n\nexport function computeSegCoords(\n  segs: Seg[],\n  dayDate: DateMarker,\n  slatCoords: TimeColsSlatsCoords,\n  eventMinHeight: number,\n  eventOrderSpecs: OrderSpec<EventApi>[],\n) {\n  computeSegVerticals(segs, dayDate, slatCoords, eventMinHeight)\n  return computeSegHorizontals(segs, eventOrderSpecs) // requires top/bottom from computeSegVerticals\n}\n\n// For each segment in an array, computes and assigns its top and bottom properties\nexport function computeSegVerticals(segs: Seg[], dayDate: DateMarker, slatCoords: TimeColsSlatsCoords, eventMinHeight: number) {\n  for (let seg of segs) {\n    seg.top = slatCoords.computeDateTop(seg.start, dayDate)\n    seg.bottom = Math.max(\n      seg.top + (eventMinHeight || 0), // yuck\n      slatCoords.computeDateTop(seg.end, dayDate),\n    )\n  }\n}\n\n// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n// Assumed the segs are already ordered.\n// NOTE: Also reorders the given array by date!\nfunction computeSegHorizontals(segs: Seg[], eventOrderSpecs: OrderSpec<EventApi>[]) {\n  // IMPORTANT TO CLEAR OLD RESULTS :(\n  for (let seg of segs) {\n    seg.level = null\n    seg.forwardCoord = null\n    seg.backwardCoord = null\n    seg.forwardPressure = null\n  }\n\n  segs = sortEventSegs(segs, eventOrderSpecs)\n\n  let level0\n  let levels = buildSlotSegLevels(segs)\n  computeForwardSlotSegs(levels)\n\n  if ((level0 = levels[0])) {\n    for (let seg of level0) {\n      computeSlotSegPressures(seg)\n    }\n\n    for (let seg of level0) {\n      computeSegForwardBack(seg, 0, 0, eventOrderSpecs)\n    }\n  }\n\n  return segs\n}\n\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\nfunction buildSlotSegLevels(segs: Seg[]) {\n  let levels = []\n  let i\n  let seg\n  let j\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i]\n\n    // go through all the levels and stop on the first level where there are no collisions\n    for (j = 0; j < levels.length; j += 1) {\n      if (!computeSlotSegCollisions(seg, levels[j]).length) {\n        break\n      }\n    }\n\n    seg.level = j;\n    (levels[j] || (levels[j] = [])).push(seg)\n  }\n\n  return levels\n}\n\n// Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\nfunction computeSlotSegCollisions(seg: Seg, otherSegs: Seg[], results = []) {\n  for (let i = 0; i < otherSegs.length; i += 1) {\n    if (isSlotSegCollision(seg, otherSegs[i])) {\n      results.push(otherSegs[i])\n    }\n  }\n\n  return results\n}\n\n// Do these segments occupy the same vertical space?\nfunction isSlotSegCollision(seg1: Seg, seg2: Seg) {\n  return seg1.bottom > seg2.top && seg1.top < seg2.bottom\n}\n\n// For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\nfunction computeForwardSlotSegs(levels) {\n  let i\n  let level\n  let j\n  let seg\n  let k\n\n  for (i = 0; i < levels.length; i += 1) {\n    level = levels[i]\n\n    for (j = 0; j < level.length; j += 1) {\n      seg = level[j]\n\n      seg.forwardSegs = []\n      for (k = i + 1; k < levels.length; k += 1) {\n        computeSlotSegCollisions(seg, levels[k], seg.forwardSegs)\n      }\n    }\n  }\n}\n\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\nfunction computeSlotSegPressures(seg: Seg) {\n  let forwardSegs = seg.forwardSegs\n  let forwardPressure = 0\n  let i\n  let forwardSeg\n\n  if (seg.forwardPressure == null) { // not already computed\n    for (i = 0; i < forwardSegs.length; i += 1) {\n      forwardSeg = forwardSegs[i]\n\n      // figure out the child's maximum forward path\n      computeSlotSegPressures(forwardSeg)\n\n      // either use the existing maximum, or use the child's forward pressure\n      // plus one (for the forwardSeg itself)\n      forwardPressure = Math.max(\n        forwardPressure,\n        1 + forwardSeg.forwardPressure,\n      )\n    }\n\n    seg.forwardPressure = forwardPressure\n  }\n}\n\n// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n// seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n//\n// The segment might be part of a \"series\", which means consecutive segments with the same pressure\n// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n// segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n// coordinate of the first segment in the series.\nfunction computeSegForwardBack(seg: Seg, seriesBackwardPressure, seriesBackwardCoord, eventOrderSpecs) {\n  let forwardSegs = seg.forwardSegs\n  let i\n\n  if (seg.forwardCoord == null) { // not already computed\n    if (!forwardSegs.length) {\n      // if there are no forward segments, this segment should butt up against the edge\n      seg.forwardCoord = 1\n    } else {\n      // sort highest pressure first\n      sortForwardSegs(forwardSegs, eventOrderSpecs)\n\n      // this segment's forwardCoord will be calculated from the backwardCoord of the\n      // highest-pressure forward segment.\n      computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord, eventOrderSpecs)\n      seg.forwardCoord = forwardSegs[0].backwardCoord\n    }\n\n    // calculate the backwardCoord from the forwardCoord. consider the series\n    seg.backwardCoord = seg.forwardCoord -\n      (seg.forwardCoord - seriesBackwardCoord) / // available width for series\n      (seriesBackwardPressure + 1) // # of segments in the series\n\n    // use this segment's coordinates to computed the coordinates of the less-pressurized\n    // forward segments\n    for (i = 0; i < forwardSegs.length; i += 1) {\n      computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord, eventOrderSpecs)\n    }\n  }\n}\n\nfunction sortForwardSegs(forwardSegs: Seg[], eventOrderSpecs) {\n  let objs = forwardSegs.map(buildTimeGridSegCompareObj)\n\n  let specs = [\n    // put higher-pressure first\n    { field: 'forwardPressure', order: -1 },\n    // put segments that are closer to initial edge first (and favor ones with no coords yet)\n    { field: 'backwardCoord', order: 1 },\n  ].concat(eventOrderSpecs)\n\n  objs.sort((obj0, obj1) => compareByFieldSpecs(obj0, obj1, specs))\n\n  return objs.map((c) => c._seg)\n}\n\nfunction buildTimeGridSegCompareObj(seg: Seg): any {\n  let obj = buildSegCompareObj(seg) as any\n\n  obj.forwardPressure = seg.forwardPressure\n  obj.backwardCoord = seg.backwardCoord\n\n  return obj\n}\n","import { createElement, StandardEvent, BaseComponent, MinimalEventProps, createFormatter } from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false,\n})\n\nexport interface TimeColEventProps extends MinimalEventProps {\n  isCondensed: boolean\n}\n\nexport class TimeColEvent extends BaseComponent<TimeColEventProps> {\n  render() {\n    let classNames = [\n      'fc-timegrid-event',\n      'fc-v-event',\n    ]\n\n    if (this.props.isCondensed) {\n      classNames.push('fc-timegrid-event-condensed')\n    }\n\n    return (\n      <StandardEvent\n        {...this.props}\n        defaultTimeFormat={DEFAULT_TIME_FORMAT}\n        extraClassNames={classNames}\n      />\n    )\n  }\n}\n","import {\n  DateMarker, BaseComponent, createElement,\n  DateRange, DayCellContent, DateProfile,\n} from '@fullcalendar/common'\n\nexport interface TimeColMiscProps { // should be given nowDate too??\n  dateProfile: DateProfile\n  date: DateMarker\n  todayRange: DateRange\n  extraHookProps?: any\n}\n\nexport class TimeColMisc extends BaseComponent<TimeColMiscProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <DayCellContent date={props.date} dateProfile={props.dateProfile} todayRange={props.todayRange} extraHookProps={props.extraHookProps}>\n        {(innerElRef, innerContent) => (\n          innerContent &&\n            <div className=\"fc-timegrid-col-misc\" ref={innerElRef}>{innerContent}</div>\n        )}\n      </DayCellContent>\n    )\n  }\n}\n","import {\n  Ref, DateMarker, BaseComponent, createElement, EventSegUiInteractionState, Seg, getSegMeta,\n  DateRange, Fragment, DayCellRoot, NowIndicatorRoot, BgEvent, renderFill,\n  DateProfile, config, buildEventRangeKey, sortEventSegs,\n} from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { computeSegCoords, computeSegVerticals } from './event-placement'\nimport { TimeColEvent } from './TimeColEvent'\nimport { TimeColMisc } from './TimeColMisc'\n\nexport interface TimeColProps {\n  elRef?: Ref<HTMLTableCellElement>\n  dateProfile: DateProfile\n  date: DateMarker\n  nowDate: DateMarker\n  todayRange: DateRange\n  extraDataAttrs?: any\n  extraHookProps?: any\n  extraClassNames?: string[]\n  fgEventSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  businessHourSegs: TimeColsSeg[]\n  nowIndicatorSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  slatCoords: TimeColsSlatsCoords\n  forPrint: boolean\n}\n\nconfig.timeGridEventCondensedHeight = 30\n\nexport class TimeCol extends BaseComponent<TimeColProps> {\n  render() {\n    let { props, context } = this\n    let isSelectMirror = context.options.selectMirror\n\n    let mirrorSegs: Seg[] = // yuck\n      (props.eventDrag && props.eventDrag.segs) ||\n      (props.eventResize && props.eventResize.segs) ||\n      (isSelectMirror && props.dateSelectionSegs) ||\n      []\n\n    let interactionAffectedInstances = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    return (\n      <DayCellRoot\n        elRef={props.elRef}\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        extraHookProps={props.extraHookProps}\n      >\n        {(rootElRef, classNames, dataAttrs) => (\n          <td\n            ref={rootElRef}\n            className={['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')}\n            {...dataAttrs}\n            {...props.extraDataAttrs}\n          >\n            <div className=\"fc-timegrid-col-frame\">\n              <div className=\"fc-timegrid-col-bg\">\n                {this.renderFillSegs(props.businessHourSegs, 'non-business')}\n                {this.renderFillSegs(props.bgEventSegs, 'bg-event')}\n                {this.renderFillSegs(props.dateSelectionSegs, 'highlight')}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  props.fgEventSegs,\n                  interactionAffectedInstances,\n                )}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  mirrorSegs as TimeColsSeg[],\n                  {},\n                  Boolean(props.eventDrag),\n                  Boolean(props.eventResize),\n                  Boolean(isSelectMirror),\n                  // TODO: pass in left/right instead of using only computeSegTopBottomCss\n                )}\n              </div>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                {this.renderNowIndicator(props.nowIndicatorSegs)}\n              </div>\n              <TimeColMisc\n                date={props.date}\n                dateProfile={props.dateProfile}\n                todayRange={props.todayRange}\n                extraHookProps={props.extraHookProps}\n              />\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  renderFgSegs(\n    segs: TimeColsSeg[],\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging?: boolean,\n    isResizing?: boolean,\n    isDateSelecting?: boolean,\n  ) {\n    let { props } = this\n\n    if (props.forPrint) {\n      return this.renderPrintFgSegs(segs)\n    }\n\n    if (props.slatCoords) {\n      return this.renderPositionedFgSegs(segs, segIsInvisible, isDragging, isResizing, isDateSelecting)\n    }\n\n    return null\n  }\n\n  renderPrintFgSegs(segs: TimeColsSeg[]) {\n    let { props, context } = this\n\n    // not DRY\n    segs = sortEventSegs(segs, context.options.eventOrder) as TimeColsSeg[]\n\n    return segs.map((seg) => (\n      <div\n        className=\"fc-timegrid-event-harness\"\n        key={seg.eventRange.instance.instanceId}\n      >\n        <TimeColEvent\n          seg={seg}\n          isDragging={false}\n          isResizing={false}\n          isDateSelecting={false}\n          isSelected={false}\n          isCondensed={false}\n          {...getSegMeta(seg, props.todayRange, props.nowDate)}\n        />\n      </div>\n    ))\n  }\n\n  renderPositionedFgSegs(\n    segs: TimeColsSeg[],\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging?: boolean,\n    isResizing?: boolean,\n    isDateSelecting?: boolean,\n  ) {\n    let { context, props } = this\n\n    // assigns TO THE SEGS THEMSELVES\n    // also, receives resorted array\n    segs = computeSegCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight, context.options.eventOrder) as TimeColsSeg[]\n\n    return segs.map((seg) => {\n      let instanceId = seg.eventRange.instance.instanceId\n      let isMirror = isDragging || isResizing || isDateSelecting\n      let positionCss = isMirror\n        // will span entire column width\n        // also, won't assign z-index, which is good, fc-event-mirror will overpower other harnesses\n        ? { left: 0, right: 0, ...this.computeSegTopBottomCss(seg) }\n        : this.computeFgSegPositionCss(seg)\n\n      return (\n        <div\n          className={'fc-timegrid-event-harness' + (seg.level > 0 ? ' fc-timegrid-event-harness-inset' : '')}\n          key={instanceId}\n          style={{\n            visibility: segIsInvisible[instanceId] ? 'hidden' : ('' as any),\n            ...positionCss,\n          }}\n        >\n          <TimeColEvent\n            seg={seg}\n            isDragging={isDragging}\n            isResizing={isResizing}\n            isDateSelecting={isDateSelecting}\n            isSelected={instanceId === props.eventSelection}\n            isCondensed={(seg.bottom - seg.top) < config.timeGridEventCondensedHeight}\n            {...getSegMeta(seg, props.todayRange, props.nowDate)}\n          />\n        </div>\n      )\n    })\n  }\n\n  renderFillSegs(segs: TimeColsSeg[], fillType: string) {\n    let { context, props } = this\n\n    if (!props.slatCoords) { return null }\n\n    // BAD: assigns TO THE SEGS THEMSELVES\n    computeSegVerticals(segs, props.date, props.slatCoords, context.options.eventMinHeight)\n\n    let children = segs.map((seg) => (\n      <div key={buildEventRangeKey(seg.eventRange)} className=\"fc-timegrid-bg-harness\" style={this.computeSegTopBottomCss(seg)}>\n        {fillType === 'bg-event' ?\n          <BgEvent seg={seg} {...getSegMeta(seg, props.todayRange, props.nowDate)} /> :\n          renderFill(fillType)}\n      </div>\n    ))\n\n    return <Fragment>{children}</Fragment>\n  }\n\n  renderNowIndicator(segs: TimeColsSeg[]) {\n    let { slatCoords, date } = this.props\n\n    if (!slatCoords) { return null }\n\n    return segs.map((seg, i) => (\n      <NowIndicatorRoot\n        isAxis={false}\n        date={date}\n        // key doesn't matter. will only ever be one\n        key={i} // eslint-disable-line react/no-array-index-key\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div\n            ref={rootElRef}\n            className={['fc-timegrid-now-indicator-line'].concat(classNames).join(' ')}\n            style={{ top: slatCoords.computeDateTop(seg.start, date) }}\n          >\n            {innerContent}\n          </div>\n        )}\n      </NowIndicatorRoot>\n    ))\n  }\n\n  computeFgSegPositionCss(seg) {\n    let { isRtl, options } = this.context\n    let shouldOverlap = options.slotEventOverlap\n    let backwardCoord = seg.backwardCoord // the left side if LTR. the right side if RTL. floating-point\n    let forwardCoord = seg.forwardCoord // the right side if LTR. the left side if RTL. floating-point\n    let left // amount of space from left edge, a fraction of the total width\n    let right // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2)\n    }\n\n    if (isRtl) {\n      left = 1 - forwardCoord\n      right = backwardCoord\n    } else {\n      left = backwardCoord\n      right = 1 - forwardCoord\n    }\n\n    let props = {\n      zIndex: seg.level + 1, // convert from 0-base to 1-based\n      left: left * 100 + '%',\n      right: right * 100 + '%',\n    }\n\n    if (shouldOverlap && seg.forwardPressure) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2 // 10 is a guesstimate of the icon's width\n    }\n\n    return { ...props, ...this.computeSegTopBottomCss(seg) }\n  }\n\n  computeSegTopBottomCss(seg) {\n    return {\n      top: seg.top,\n      bottom: -seg.bottom,\n    }\n  }\n}\n","import {\n  createElement, VNode,\n  BaseComponent,\n  EventSegUiInteractionState,\n  CssDimValue,\n  DateMarker,\n  RefMap,\n  createRef,\n  PositionCache,\n  memoize,\n  DateRange,\n  NowIndicatorRoot,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { TableCellModel } from '@fullcalendar/daygrid' // TODO: good to use this interface?\nimport { TimeColsSeg, splitSegsByCol, splitInteractionByCol } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeCol } from './TimeCol'\n\nexport interface TimeColsContentProps {\n  axis: boolean\n  cells: TableCellModel[]\n  dateProfile: DateProfile\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  nowIndicatorSegs: TimeColsSeg[]\n  clientWidth: number | null\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  slatCoords: TimeColsSlatsCoords\n  onColCoords?: (colCoords: PositionCache) => void\n  forPrint: boolean\n}\n\nexport class TimeColsContent extends BaseComponent<TimeColsContentProps> { // TODO: rename\n  private splitFgEventSegs = memoize(splitSegsByCol)\n  private splitBgEventSegs = memoize(splitSegsByCol)\n  private splitBusinessHourSegs = memoize(splitSegsByCol)\n  private splitNowIndicatorSegs = memoize(splitSegsByCol)\n  private splitDateSelectionSegs = memoize(splitSegsByCol)\n  private splitEventDrag = memoize(splitInteractionByCol)\n  private splitEventResize = memoize(splitInteractionByCol)\n  private rootElRef = createRef<HTMLDivElement>()\n  private cellElRefs = new RefMap<HTMLTableCellElement>()\n\n  render() {\n    let { props, context } = this\n    let nowIndicatorTop =\n      context.options.nowIndicator &&\n      props.slatCoords &&\n      props.slatCoords.safeComputeTop(props.nowDate) // might return void\n\n    let colCnt = props.cells.length\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt)\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt)\n    let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt)\n\n    return (\n      <div className=\"fc-timegrid-cols\" ref={this.rootElRef}>\n        <table style={{\n          minWidth: props.tableMinWidth,\n          width: props.clientWidth,\n        }}\n        >\n          {props.tableColGroupNode}\n          <tbody>\n            <tr>\n              {props.axis && (\n                <td className=\"fc-timegrid-col fc-timegrid-axis\">\n                  <div className=\"fc-timegrid-col-frame\">\n                    <div className=\"fc-timegrid-now-indicator-container\">\n                      {typeof nowIndicatorTop === 'number' && (\n                        <NowIndicatorRoot isAxis date={props.nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )}\n                    </div>\n                  </div>\n                </td>\n              )}\n              {props.cells.map((cell, i) => (\n                <TimeCol\n                  key={cell.key}\n                  elRef={this.cellElRefs.createRef(cell.key)}\n                  dateProfile={props.dateProfile}\n                  date={cell.date}\n                  nowDate={props.nowDate}\n                  todayRange={props.todayRange}\n                  extraHookProps={cell.extraHookProps}\n                  extraDataAttrs={cell.extraDataAttrs}\n                  extraClassNames={cell.extraClassNames}\n                  fgEventSegs={fgEventSegsByRow[i]}\n                  bgEventSegs={bgEventSegsByRow[i]}\n                  businessHourSegs={businessHourSegsByRow[i]}\n                  nowIndicatorSegs={nowIndicatorSegsByRow[i]}\n                  dateSelectionSegs={dateSelectionSegsByRow[i]}\n                  eventDrag={eventDragByRow[i]}\n                  eventResize={eventResizeByRow[i]}\n                  slatCoords={props.slatCoords}\n                  eventSelection={props.eventSelection}\n                  forPrint={props.forPrint}\n                />\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateCoords()\n  }\n\n  componentDidUpdate() {\n    this.updateCoords()\n  }\n\n  updateCoords() {\n    let { props } = this\n\n    if (\n      props.onColCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(\n        new PositionCache(\n          this.rootElRef.current,\n          collectCellEls(this.cellElRefs.currentMap, props.cells),\n          true, // horizontal\n          false,\n        ),\n      )\n    }\n  }\n}\n\nfunction collectCellEls(elMap: { [key: string]: HTMLElement }, cells: TableCellModel[]) {\n  return cells.map((cell) => elMap[cell.key])\n}\n","import {\n  createElement, VNode, Ref,\n  addDurations,\n  multiplyDuration,\n  wholeDivideDurations,\n  DateMarker,\n  BaseComponent,\n  EventSegUiInteractionState,\n  memoize,\n  CssDimValue,\n  PositionCache,\n  ScrollResponder,\n  ScrollRequest,\n  DateRange,\n  Duration,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { TableCellModel } from '@fullcalendar/daygrid' // TODO: good to use this interface?\nimport { TimeColsSlats } from './TimeColsSlats'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsContent } from './TimeColsContent'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColsProps {\n  cells: TableCellModel[]\n  dateProfile: DateProfile\n  slotDuration: Duration\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  rootElRef?: Ref<HTMLDivElement>\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  nowIndicatorSegs: TimeColsSeg[]\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n}\n\ninterface TimeColsState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\nexport class TimeCols extends BaseComponent<TimeColsProps, TimeColsState> {\n  private processSlotOptions = memoize(processSlotOptions)\n  private scrollResponder: ScrollResponder\n  private colCoords: PositionCache\n\n  state = {\n    slatCoords: null,\n  }\n\n  render() {\n    let { props, state } = this\n\n    return (\n      <div\n        className=\"fc-timegrid-body\"\n        ref={props.rootElRef}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <TimeColsSlats\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          slatMetas={props.slatMetas}\n          clientWidth={props.clientWidth}\n          minHeight={props.expandRows ? props.clientHeight : ''}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */}\n          onCoords={this.handleSlatCoords}\n        />\n        <TimeColsContent\n          cells={props.cells}\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          businessHourSegs={props.businessHourSegs}\n          bgEventSegs={props.bgEventSegs}\n          fgEventSegs={props.fgEventSegs}\n          dateSelectionSegs={props.dateSelectionSegs}\n          eventSelection={props.eventSelection}\n          eventDrag={props.eventDrag}\n          eventResize={props.eventResize}\n          todayRange={props.todayRange}\n          nowDate={props.nowDate}\n          nowIndicatorSegs={props.nowIndicatorSegs}\n          clientWidth={props.clientWidth}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.tableColGroupNode}\n          slatCoords={state.slatCoords}\n          onColCoords={this.handleColCoords}\n          forPrint={props.forPrint}\n        />\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest)\n  }\n\n  componentDidUpdate(prevProps: TimeColsProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile)\n  }\n\n  componentWillUnmount() {\n    this.scrollResponder.detach()\n  }\n\n  handleScrollRequest = (request: ScrollRequest) => {\n    let { onScrollTopRequest } = this.props\n    let { slatCoords } = this.state\n\n    if (onScrollTopRequest && slatCoords) {\n      if (request.time) {\n        let top = slatCoords.computeTimeTop(request.time)\n        top = Math.ceil(top) // zoom can give weird floating-point values. rather scroll a little bit further\n        if (top) {\n          top += 1 // to overcome top border that slots beyond the first have. looks better\n        }\n\n        onScrollTopRequest(top)\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  handleColCoords = (colCoords: PositionCache | null) => {\n    this.colCoords = colCoords\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords | null) => {\n    this.setState({ slatCoords })\n\n    if (this.props.onSlatCoords) {\n      this.props.onSlatCoords(slatCoords)\n    }\n  }\n\n  positionToHit(positionLeft, positionTop) {\n    let { dateEnv, options } = this.context\n    let { colCoords } = this\n    let { dateProfile } = this.props\n    let { slatCoords } = this.state\n    let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration)\n\n    let colIndex = colCoords.leftToIndex(positionLeft)\n    let slatIndex = slatCoords.positions.topToIndex(positionTop)\n\n    if (colIndex != null && slatIndex != null) {\n      let slatTop = slatCoords.positions.tops[slatIndex]\n      let slatHeight = slatCoords.positions.getHeight(slatIndex)\n      let partial = (positionTop - slatTop) / slatHeight // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot) // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex\n\n      let dayDate = this.props.cells[colIndex].date\n      let time = addDurations(\n        dateProfile.slotMinTime,\n        multiplyDuration(snapDuration, snapIndex),\n      )\n\n      let start = dateEnv.add(dayDate, time)\n      let end = dateEnv.add(start, snapDuration)\n\n      return {\n        col: colIndex,\n        dateSpan: {\n          range: { start, end },\n          allDay: false,\n        },\n        dayEl: colCoords.els[colIndex],\n        relativeRect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight,\n        },\n      }\n    }\n\n    return null\n  }\n}\n\nfunction processSlotOptions(slotDuration: Duration, snapDurationOverride: Duration | null) {\n  let snapDuration = snapDurationOverride || slotDuration\n  let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration)\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration\n    snapsPerSlot = 1\n    // TODO: say warning?\n  }\n\n  return { snapDuration, snapsPerSlot }\n}\n","import { intersectRanges, DateRange, Slicer } from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport class DayTimeColsSlicer extends Slicer<TimeColsSeg, [DateRange[]]> {\n  sliceRange(range: DateRange, dayRanges: DateRange[]): TimeColsSeg[] {\n    let segs: TimeColsSeg[] = []\n\n    for (let col = 0; col < dayRanges.length; col += 1) {\n      let segRange = intersectRanges(range, dayRanges[col])\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col,\n        })\n      }\n    }\n\n    return segs\n  }\n}\n","import {\n  createElement,\n  createRef,\n  VNode,\n  DateComponent,\n  DateProfile,\n  EventStore,\n  EventUiHash,\n  EventInteractionState,\n  DateSpan,\n  memoize,\n  DateRange,\n  DayTableModel,\n  DateEnv,\n  DateMarker,\n  Hit,\n  NowTimer,\n  CssDimValue,\n  Duration,\n} from '@fullcalendar/common'\nimport { TimeCols } from './TimeCols'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\n\nexport interface DayTimeColsProps {\n  dateProfile: DateProfile\n  dayTableModel: DayTableModel\n  axis: boolean\n  slotDuration: Duration\n  slatMetas: TimeSlatMeta[]\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n}\n\nexport class DayTimeCols extends DateComponent<DayTimeColsProps> {\n  private buildDayRanges = memoize(buildDayRanges)\n  private slicer = new DayTimeColsSlicer()\n  private timeColsRef = createRef<TimeCols>()\n\n  render() {\n    let { props, context } = this\n    let { dateProfile, dayTableModel } = props\n\n    let isNowIndicator = context.options.nowIndicator\n    let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv)\n\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return (\n      <NowTimer unit={isNowIndicator ? 'minute' : 'day'}>\n        {(nowDate: DateMarker, todayRange: DateRange) => (\n          <TimeCols\n            ref={this.timeColsRef}\n            rootElRef={this.handleRootEl}\n            {...this.slicer.sliceProps(props, dateProfile, null, context, dayRanges)}\n            forPrint={props.forPrint}\n            axis={props.axis}\n            dateProfile={dateProfile}\n            slatMetas={props.slatMetas}\n            slotDuration={props.slotDuration}\n            cells={dayTableModel.cells[0]}\n            tableColGroupNode={props.tableColGroupNode}\n            tableMinWidth={props.tableMinWidth}\n            clientWidth={props.clientWidth}\n            clientHeight={props.clientHeight}\n            expandRows={props.expandRows}\n            nowDate={nowDate}\n            nowIndicatorSegs={isNowIndicator && this.slicer.sliceNowDate(nowDate, context, dayRanges)}\n            todayRange={todayRange}\n            onScrollTopRequest={props.onScrollTopRequest}\n            onSlatCoords={props.onSlatCoords}\n          />\n        )}\n      </NowTimer>\n    )\n  }\n\n  handleRootEl = (rootEl: HTMLDivElement | null) => {\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, { el: rootEl })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let rawHit = this.timeColsRef.current.positionToHit(positionLeft, positionTop)\n\n    if (rawHit) {\n      return {\n        component: this,\n        dateSpan: rawHit.dateSpan,\n        dayEl: rawHit.dayEl,\n        rect: {\n          left: rawHit.relativeRect.left,\n          right: rawHit.relativeRect.right,\n          top: rawHit.relativeRect.top,\n          bottom: rawHit.relativeRect.bottom,\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n}\n\nexport function buildDayRanges(dayTableModel: DayTableModel, dateProfile: DateProfile, dateEnv: DateEnv): DateRange[] {\n  let ranges: DateRange[] = []\n\n  for (let date of dayTableModel.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime),\n    })\n  }\n\n  return ranges\n}\n","import {\n  createDuration,\n  asRoughMs,\n  formatIsoTimeString,\n  addDurations,\n  wholeDivideDurations,\n  Duration,\n  DateMarker,\n  DateEnv,\n} from '@fullcalendar/common'\n\nexport interface TimeSlatMeta {\n  date: DateMarker\n  time: Duration\n  key: string\n  isoTimeStr: string\n  isLabeled: boolean\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [\n  { hours: 1 },\n  { minutes: 30 },\n  { minutes: 15 },\n  { seconds: 30 },\n  { seconds: 15 },\n]\n\nexport function buildSlatMetas(\n  slotMinTime: Duration,\n  slotMaxTime: Duration,\n  explicitLabelInterval: Duration | null,\n  slotDuration: Duration,\n  dateEnv: DateEnv,\n) {\n  let dayStart = new Date(0)\n  let slatTime = slotMinTime\n  let slatIterator = createDuration(0)\n  let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration)\n  let metas: TimeSlatMeta[] = []\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    let date = dateEnv.add(dayStart, slatTime)\n    let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null\n\n    metas.push({\n      date,\n      time: slatTime,\n      key: date.toISOString(), // we can't use the isoTimeStr for uniqueness when minTime/maxTime beyone 0h/24h\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled,\n    })\n\n    slatTime = addDurations(slatTime, slotDuration)\n    slatIterator = addDurations(slatIterator, slotDuration)\n  }\n\n  return metas\n}\n\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  let i\n  let labelInterval\n  let slotsPerLabel\n\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i])\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration)\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval\n    }\n  }\n\n  return slotDuration // fall back\n}\n","import {\n  createElement,\n  DateProfileGenerator, DateProfile,\n  DayHeader,\n  DaySeriesModel,\n  DayTableModel,\n  memoize,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { DayTable } from '@fullcalendar/daygrid'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeCols } from './DayTimeCols'\nimport { buildSlatMetas } from './time-slat-meta'\n\nexport class DayTimeColsView extends TimeColsView {\n  private buildTimeColsModel = memoize(buildTimeColsModel)\n  private buildSlatMetas = memoize(buildSlatMetas)\n\n  render() {\n    let { options, dateEnv, dateProfileGenerator } = this.context\n    let { props } = this\n    let { dateProfile } = props\n    let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator)\n    let splitProps = this.allDaySplitter.splitProps(props)\n    let slatMetas = this.buildSlatMetas(\n      dateProfile.slotMinTime,\n      dateProfile.slotMaxTime,\n      options.slotLabelInterval,\n      options.slotDuration,\n      dateEnv,\n    )\n    let { dayMinWidth } = options\n    let hasAttachedAxis = !dayMinWidth\n    let hasDetachedAxis = dayMinWidth\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        dates={dayTableModel.headerDates}\n        dateProfile={dateProfile}\n        datesRepDistinctDays\n        renderIntro={hasAttachedAxis ? this.renderHeadAxis : null}\n      />\n    )\n\n    let allDayContent = (options.allDaySlot !== false) && ((contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        {...splitProps.allDay}\n        dateProfile={dateProfile}\n        dayTableModel={dayTableModel}\n        nextDayThreshold={options.nextDayThreshold}\n        tableMinWidth={contentArg.tableMinWidth}\n        colGroupNode={contentArg.tableColGroupNode}\n        renderRowIntro={hasAttachedAxis ? this.renderTableRowAxis : null}\n        showWeekNumbers={false}\n        expandRows={false}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n        {...this.getAllDayMaxEventProps()}\n      />\n    ))\n\n    let timeGridContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTimeCols\n        {...splitProps.timed}\n        dayTableModel={dayTableModel}\n        dateProfile={dateProfile}\n        axis={hasAttachedAxis}\n        slotDuration={options.slotDuration}\n        slatMetas={slatMetas}\n        forPrint={props.forPrint}\n        tableColGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        onSlatCoords={this.handleSlatCoords}\n        expandRows={contentArg.expandRows}\n        onScrollTopRequest={this.handleScrollTopRequest}\n      />\n    )\n\n    return hasDetachedAxis\n      ? this.renderHScrollLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n        dayTableModel.colCnt,\n        dayMinWidth,\n        slatMetas,\n        this.state.slatCoords,\n      )\n      : this.renderSimpleLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n      )\n  }\n}\n\nexport function buildTimeColsModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(daySeries, false)\n}\n","export const OPTION_REFINERS = {\n  allDaySlot: Boolean,\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeColsView, buildTimeColsModel } from './DayTimeColsView'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { DayTimeCols, buildDayRanges } from './DayTimeCols'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { DayTimeCols, DayTimeColsView, TimeColsView, buildTimeColsModel, buildDayRanges, DayTimeColsSlicer, TimeColsSeg }\nexport { TimeCols } from './TimeCols'\nexport { TimeSlatMeta, buildSlatMetas } from './time-slat-meta'\nexport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\n\nexport default createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true, // indicates that slotMinTime/slotMaxTime affects rendering\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true, // a bad name. confused with overlap/constraint system\n    },\n\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: { days: 1 },\n    },\n\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: { weeks: 1 },\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}