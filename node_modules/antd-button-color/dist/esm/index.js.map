{"version":3,"sources":["../../lib/index.tsx"],"names":["React","ButtonOriginal","customTypeArray","customWithArray","styleButton","dashed","borderStyle","ghost","link","boxShadow","borderColor","disableAnimation","Button","forwardRef","props","ref","_isLink","with","_isDashed","_isGhost","_type","type","_ghost","_style","undefined","_linkStyle","_classes","className","filter","x","join","style","children"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAAwD,wBAAxD;AAGA,MAAMC,eAAe,GAAG,CACpB,SADoB,EAEpB,SAFoB,EAGpB,MAHoB,EAIpB,MAJoB,EAKpB,WALoB,EAMpB,QANoB,CAAxB;AAQA,MAAMC,eAAe,GAAG,CACpB,MADoB,EAEpB,QAFoB,EAGpB,OAHoB,CAAxB;AAgBA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAE;AADT,GADQ;AAIhBC,EAAAA,KAAK,EAAE;AACHD,IAAAA,WAAW,EAAE;AADV,GAJS;AAOhBE,EAAAA,IAAI,EAAE;AACFF,IAAAA,WAAW,EAAE,MADX;AAEFG,IAAAA,SAAS,EAAE,MAFT;AAGFC,IAAAA,WAAW,EAAE;AAHX;AAPU,CAApB;AAcA,MAAMC,gBAAwB,GAAG,mBAAjC;AAEA,MAAMC,MAAM,GAAGZ,KAAK,CAACa,UAAN,CAAiB,CAACC,KAAD,EAAiBC,GAAjB,KAA8B;AAC1D,QAAMC,OAAO,GAAGF,KAAK,CAACG,IAAN,KAAe,MAA/B;;AACA,QAAMC,SAAS,GAAGJ,KAAK,CAACG,IAAN,KAAe,QAAjC;;AACA,QAAME,QAAQ,GAAGL,KAAK,CAACG,IAAN,KAAe,OAAhC;;AACA,QAAMG,KAAU,GAAGN,KAAK,CAACO,IAAzB;;AACA,QAAMC,MAAe,GAAGJ,SAAS,IAAIC,QAAb,IAAyBH,OAAzB,IAAoCF,KAAK,CAACP,KAA1C,GAAiD,IAAjD,GAAwD,KAAhF;;AACA,QAAMgB,MAAM,GAAGT,KAAK,CAACG,IAAN,GAAab,WAAW,CAACU,KAAK,CAACG,IAAP,CAAxB,GAAuCO,SAAtD;;AACA,QAAMC,UAAU,GAAGT,OAAO,GAAGL,gBAAH,GAAsBa,SAAhD;;AACA,QAAME,QAAQ,GAAG,CAACD,UAAD,EAAaX,KAAK,CAACa,SAAnB,EAA8BC,MAA9B,CAAqCC,CAAC,IAAI,CAAC,CAACA,CAA5C,EAA+CC,IAA/C,CAAoD,GAApD,CAAjB;;AACA,sBACI,oBAAC,cAAD,eAAoBhB,KAApB;AAA2B,IAAA,GAAG,EAAEC,GAAhC;AAAqC,IAAA,SAAS,EAAEW,QAAhD;AAA0D,IAAA,KAAK,oBAAMH,MAAN,MAAiBT,KAAK,CAACiB,KAAvB,CAA/D;AAA8F,IAAA,KAAK,EAAET,MAArG;AAA6G,IAAA,IAAI,EAAEF;AAAnH,MACKN,KAAK,CAACkB,QADX,CADJ;AAKH,CAdc,CAAf;AAgBA,eAAepB,MAAf","sourcesContent":["import * as React from \"react\";\r\nimport ButtonOriginal, { ButtonProps, ButtonType } from \"antd/lib/button/button\";\r\n\r\ntype Mod<T, R> = Omit<T, keyof R> & R;\r\nconst customTypeArray = [\r\n    \"success\", \r\n    \"warning\", \r\n    \"info\", \r\n    \"dark\", \r\n    \"lightdark\", \r\n    \"danger\"\r\n] as const; \r\nconst customWithArray = [\r\n    \"link\", \r\n    \"dashed\", \r\n    \"ghost\"\r\n] as const; \r\ntype typeProps = typeof customTypeArray[number];\r\ntype withProps = typeof customWithArray[number];\r\ntype ModButtonProps = Mod<ButtonProps, {\r\n    type?: ButtonType | typeProps\r\n}>;\r\n\r\ntype TButton = ModButtonProps & {\r\n    with?: withProps;\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst styleButton = {\r\n    dashed: {\r\n        borderStyle: \"dashed\"\r\n    },\r\n    ghost: {\r\n        borderStyle: \"solid\"\r\n    },\r\n    link: {\r\n        borderStyle: \"none\",\r\n        boxShadow: \"none\",\r\n        borderColor: \"transparent\"\r\n    }\r\n}\r\n\r\nconst disableAnimation: string = \"disable-animation\";\r\n\r\nconst Button = React.forwardRef((props: TButton, ref: any) => {\r\n    const _isLink = props.with === 'link';\r\n    const _isDashed = props.with === 'dashed';\r\n    const _isGhost = props.with === 'ghost';\r\n    const _type: any = props.type;\r\n    const _ghost: boolean = _isDashed || _isGhost || _isLink || props.ghost? true : false;\r\n    const _style = props.with ? styleButton[props.with] : undefined;\r\n    const _linkStyle = _isLink ? disableAnimation : undefined;\r\n    const _classes = [_linkStyle, props.className].filter(x => !!x).join(' ');\r\n    return (\r\n        <ButtonOriginal {...props} ref={ref} className={_classes} style={{..._style, ...props.style}} ghost={_ghost} type={_type}>\r\n            {props.children}\r\n        </ButtonOriginal>\r\n    )\r\n});\r\n\r\nexport default Button;"],"file":"index.js"}