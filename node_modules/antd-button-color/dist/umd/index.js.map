{"version":3,"sources":["../../lib/index.tsx"],"names":["customTypeArray","customWithArray","styleButton","dashed","borderStyle","ghost","link","boxShadow","borderColor","disableAnimation","Button","_isLink","props","_isDashed","_isGhost","_type","_ghost","_style","_linkStyle","_classes","x"],"mappings":";;;;;;;;;;;;;;;;;;;MAAA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,QAAMA,eAAe,GAAG,CAAA,SAAA,EAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAxB,QAAwB,CAAxB;AAQA,QAAMC,eAAe,GAAG,CAAA,MAAA,EAAA,QAAA,EAAxB,OAAwB,CAAxB;AAgBA,QAAMC,WAAW,GAAG;AAChBC,IAAAA,MAAM,EAAE;AACJC,MAAAA,WAAW,EAAE;AADT,KADQ;AAIhBC,IAAAA,KAAK,EAAE;AACHD,MAAAA,WAAW,EAAE;AADV,KAJS;AAOhBE,IAAAA,IAAI,EAAE;AACFF,MAAAA,WAAW,EADT,MAAA;AAEFG,MAAAA,SAAS,EAFP,MAAA;AAGFC,MAAAA,WAAW,EAAE;AAHX;AAPU,GAApB;AAcA,QAAMC,gBAAwB,GAA9B,mBAAA;AAEA,QAAMC,MAAM,GAAG,KAAK,CAAL,UAAA,CAAiB,CAAA,KAAA,EAAA,GAAA,KAA8B;AAC1D,UAAMC,OAAO,GAAGC,KAAK,CAALA,IAAAA,KAAhB,MAAA;;AACA,UAAMC,SAAS,GAAGD,KAAK,CAALA,IAAAA,KAAlB,QAAA;;AACA,UAAME,QAAQ,GAAGF,KAAK,CAALA,IAAAA,KAAjB,OAAA;;AACA,UAAMG,KAAU,GAAGH,KAAK,CAAxB,IAAA;;AACA,UAAMI,MAAe,GAAGH,SAAS,IAATA,QAAAA,IAAAA,OAAAA,IAAoCD,KAAK,CAAzCC,KAAAA,GAAAA,IAAAA,GAAxB,KAAA;;AACA,UAAMI,MAAM,GAAGL,KAAK,CAALA,IAAAA,GAAaV,WAAW,CAACU,KAAK,CAA9BA,IAAwB,CAAxBA,GAAf,SAAA;;AACA,UAAMM,UAAU,GAAGP,OAAO,GAAA,gBAAA,GAA1B,SAAA;;AACA,UAAMQ,QAAQ,GAAG,CAAA,UAAA,EAAaP,KAAK,CAAlB,SAAA,EAAA,MAAA,CAAqCQ,CAAC,IAAI,CAAC,CAA3C,CAAA,EAAA,IAAA,CAAjB,GAAiB,CAAjB;;AACA,WAAA,aACI,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA2B,MAAA,GAAG,EAA9B,GAAA;AAAqC,MAAA,SAAS,EAA9C,QAAA;AAA0D,MAAA,KAAK,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAiBR,KAAK,CAArF,KAA+D,CAA/D;AAA8F,MAAA,KAAK,EAAnG,MAAA;AAA6G,MAAA,IAAI,EAAEG;AAAnH,KAAA,CAAA,EACKH,KAAK,CAFd,QACI,CADJ;AATJ,GAAe,CAAf;oBAgBA,M","sourcesContent":["import * as React from \"react\";\r\nimport ButtonOriginal, { ButtonProps, ButtonType } from \"antd/lib/button/button\";\r\n\r\ntype Mod<T, R> = Omit<T, keyof R> & R;\r\nconst customTypeArray = [\r\n    \"success\", \r\n    \"warning\", \r\n    \"info\", \r\n    \"dark\", \r\n    \"lightdark\", \r\n    \"danger\"\r\n] as const; \r\nconst customWithArray = [\r\n    \"link\", \r\n    \"dashed\", \r\n    \"ghost\"\r\n] as const; \r\ntype typeProps = typeof customTypeArray[number];\r\ntype withProps = typeof customWithArray[number];\r\ntype ModButtonProps = Mod<ButtonProps, {\r\n    type?: ButtonType | typeProps\r\n}>;\r\n\r\ntype TButton = ModButtonProps & {\r\n    with?: withProps;\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst styleButton = {\r\n    dashed: {\r\n        borderStyle: \"dashed\"\r\n    },\r\n    ghost: {\r\n        borderStyle: \"solid\"\r\n    },\r\n    link: {\r\n        borderStyle: \"none\",\r\n        boxShadow: \"none\",\r\n        borderColor: \"transparent\"\r\n    }\r\n}\r\n\r\nconst disableAnimation: string = \"disable-animation\";\r\n\r\nconst Button = React.forwardRef((props: TButton, ref: any) => {\r\n    const _isLink = props.with === 'link';\r\n    const _isDashed = props.with === 'dashed';\r\n    const _isGhost = props.with === 'ghost';\r\n    const _type: any = props.type;\r\n    const _ghost: boolean = _isDashed || _isGhost || _isLink || props.ghost? true : false;\r\n    const _style = props.with ? styleButton[props.with] : undefined;\r\n    const _linkStyle = _isLink ? disableAnimation : undefined;\r\n    const _classes = [_linkStyle, props.className].filter(x => !!x).join(' ');\r\n    return (\r\n        <ButtonOriginal {...props} ref={ref} className={_classes} style={{..._style, ...props.style}} ghost={_ghost} type={_type}>\r\n            {props.children}\r\n        </ButtonOriginal>\r\n    )\r\n});\r\n\r\nexport default Button;"],"file":"index.js"}